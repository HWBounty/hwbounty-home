{"version":3,"sources":["util/getTimePhrase.js","util/notifications.js","components/Home/CTime.js","components/Calendar/PeriodList.js","components/Calendar/DesktopSchedule.js","components/Calendar/Schedule.js","util/getScheduleTimePhrase.js","util/getScheduleTimeEnd.js","components/Calendar/MobileSchedule.js","pages/schedule.js"],"names":["lastTimeBasedNotif","getTimePhrase","localStorage","getItem","scheduleOBJ","JSON","parse","schedule","user","convertedMoment","classes","moment","tz","timePeriod","utcOffset","currentMoment","getPeriodName","periodID","nameOverrides","dotw","isoWeekday","formattedClasses","map","clas","period","timeStart","add","unix","timeEnd","currentClass","filter","x","Date","now","endingInString","Math","round","duration","asHours","asMinutes","asSeconds","Notifications","pushNotification","undefined","firstName","nextClass","startingInString","lastClass","pop","lastEnded","error","Notification","permission","requestPermission","icon","img","title","text","body","image","CTime2","props","Typography","variant","style","fontSize","fontFamily","format","fontWeight","useStyles","makeStyles","theme","cardTitle","cardSubtitles1","card","boxShadow","generatePeriodColors","stops","retarr","index","push","cardWidth","cardHeight","PeriodButton","UI","Card","borderRadius","backgroundColor","color","width","height","display","padding","flexDirection","alignItems","margin","className","name","startTime","endTime","connect","state","periodData","scheduleData","zoomLinkInfo","offset","scheduleDay","ogHasOffset","allClasses","Map","length","forEach","set","course","id","today","colors","i","courseInfo","has","value","get","course_title","zoom","links","linkGroup","link","decodeHTML","flat","tSS","tES","nofill","parsePeriods","periodMapped","React","Children","toArray","root","border","marginTop","paddingBottom","cursor","position","fullHeight","minHeight","maxHeight","background","popupTitle","themedText","forceUpdate","useForceUpdate","useState","speedDialOpen","setSpeedDialOpen","alternateScheduleDialog","setAlternateScheduleDialog","handleClose","sleep","TetLib","speedDialActions","authenticated","privateID","createdBy","Today","runID","useEffect","run","a","justifyContent","maxwidth","flexGrow","document","getElementById","marginLeft","marginRight","offsetWidth","Divider","setTimeout","Container","SpeedDial","ariaLabel","speedDial","hidden","SpeedDialIcon","onClose","onOpen","open","bottom","right","action","SpeedDialAction","tooltipTitle","onClick","Dialog","fullWidth","maxWidth","aria-labelledby","DialogTitle","DialogContent","string","gt","replace","$0","$1","String","fromCharCode","toLowerCase","parseInt","substr","hasOwnProperty","useButtonStyles","enqueueSnackbar","useSnackbar","timePassed","expanded","setExpanded","notDoneCol","marginBottom","align","window","innerWidth","left","t","mins","Collapse","in","z","Button","e","event","stopPropagation","newWindow","opener","handleZoomLinkClicked","fetchAndSet","setCourseInfo","setScheduleData","setCannotFetch","console","trace","dayOffset","s","fetching","setFetching","cannotFetch","linkUserSchoology","CircularProgress","periods","splice","p","getScheduleTimeEnd","sort","b","withSnackbar","setOffset","popupForceClosed","setPopupForceClosed","adjustedMoment","borderWidth","IconButton","ChevronLeft","ChevronRight","verticalAlign","minWidth","textAlign","Snackbar","Alert","severity","reason","fromNow","size","paddingTop","updateSchedule","addEventListener","removeEventListener","cachedSchedule","setSchedule","removeItem","store","dispatch","DesktopSchedule","MobileSchedule"],"mappings":"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","file":"static/js/16.b871623b.chunk.js","sourcesContent":["import moment from 'moment-timezone';\nimport Notifications from '../util/notifications';\nlet lastTimeBasedNotif = 0;\nexport const getTimePhrase = () => {\n  try {\n    if (!localStorage.getItem('cachedSchedule')) return '';\n    let scheduleOBJ = JSON.parse(localStorage.getItem('cachedSchedule'));\n    let classData = JSON.parse(localStorage.getItem('cachedCourseInfo'));\n    let schedule = JSON.parse(scheduleOBJ.schedule.schedule);\n    let user = JSON.parse(localStorage.getItem('user'));\n    let allClasses = scheduleOBJ.classes;\n    let convertedMoment = moment().tz(schedule.timePeriod).utcOffset();\n    let currentMoment = moment().utcOffset();\n    let currentTime = moment();\n    let getPeriodName = (periodID) => {\n      return (\n        JSON.parse(scheduleOBJ.schedule.nameOverrides)[periodID] || 'Break'\n      );\n    };\n    let dotw = [\n      'monday',\n      'tuesday',\n      'wednesday',\n      'thursday',\n      'friday',\n      'saturday',\n      'sunday',\n    ][moment().isoWeekday() - 1];\n    let formattedClasses =\n      schedule[dotw] &&\n      schedule[dotw].map((clas) => {\n        return {\n          period: clas.period,\n          timeStart:\n            moment(clas.timeStart, 'hh:mma')\n              .add((convertedMoment - currentMoment) / 60, 'hours')\n              .unix() * 1000,\n          timeEnd:\n            moment(clas.timeEnd, 'hh:mma')\n              .add((convertedMoment - currentMoment) / 60, 'hours')\n              .unix() * 1000,\n        };\n      });\n    //Check for current class first\n    let currentClass = formattedClasses.filter(\n      (x) => x.timeStart < Date.now() && Date.now() < x.timeEnd\n    )[0];\n\n    if (currentClass) {\n      let endingInString = `${\n        currentClass.timeEnd - Date.now() > 60000\n          ? currentClass.timeEnd - Date.now() > 3600000\n            ? `${Math.round(\n                moment.duration(currentClass.timeEnd - Date.now()).asHours()\n              )} hours`\n            : `${Math.round(\n                moment.duration(currentClass.timeEnd - Date.now()).asMinutes()\n              )} minutes`\n          : `${Math.round(\n              moment.duration(currentClass.timeEnd - Date.now()).asSeconds()\n            )} seconds`\n      }`;\n\n      //Try to push a notif if class is starting soon\n      if (\n        currentClass.timeEnd - Date.now() < 120 * 1000 &&\n        Date.now() - lastTimeBasedNotif > 240 * 1000\n      ) {\n        lastTimeBasedNotif = Date.now();\n\n        Notifications.pushNotification(\n          undefined,\n          undefined,\n          `${getPeriodName(currentClass.period)} is ending soon!`,\n          `Hey ${user.firstName}, ${getPeriodName(\n            currentClass.period\n          )} is about to end in ${endingInString}!`\n        );\n      }\n\n      return `${getPeriodName(currentClass.period)} ends in ${endingInString}`;\n    }\n    //Check for next upcoming class\n    let nextClass = formattedClasses.filter((x) => x.timeStart > Date.now())[0];\n\n    if (nextClass) {\n      let startingInString = `${\n        nextClass.timeStart - Date.now() > 60000\n          ? nextClass.timeStart - Date.now() > 3600000\n            ? `${Math.round(\n                moment.duration(nextClass.timeStart - Date.now()).asHours()\n              )} hours`\n            : `${Math.round(\n                moment.duration(nextClass.timeStart - Date.now()).asMinutes()\n              )} minutes`\n          : `${Math.round(\n              moment.duration(nextClass.timeStart - Date.now()).asSeconds()\n            )} seconds`\n      }`;\n      if (\n        nextClass.timeStart - Date.now() < 120 * 1000 &&\n        Date.now() - lastTimeBasedNotif > 240 * 1000\n      ) {\n        lastTimeBasedNotif = Date.now();\n\n        Notifications.pushNotification(\n          undefined,\n          undefined,\n          `${getPeriodName(nextClass.period)} is starting soon!`,\n          `Hey ${user.firstName}, ${getPeriodName(\n            nextClass.period\n          )} is about to start in ${startingInString}!`\n        );\n      }\n\n      return `${getPeriodName(nextClass.period)} starts in ${startingInString}`;\n    }\n\n    //Check for what was the previous class\n    let lastClass = formattedClasses\n      .filter((x) => Date.now() > x.timeEnd)\n      .pop();\n    if (lastClass) {\n      let lastEnded = `${\n        Date.now() - lastClass.timeEnd > 60000\n          ? Date.now() - lastClass.timeEnd > 60000\n            ? `${Math.round(\n                moment.duration(Date.now() - lastClass.timeEnd).asHours()\n              )} hours`\n            : `${Math.round(\n                moment.duration(Date.now() - lastClass.timeEnd).asMinutes()\n              )} minutes`\n          : `${Math.round(\n              moment.duration(Date.now() - lastClass.timeEnd).asSeconds()\n            )} seconds`\n      }`;\n      return `${getPeriodName(lastClass.period)} ended ${lastEnded} ago`;\n    }\n\n    //If no classes exist for the day\n    return `No classes today! Take a break, you deserve it :)`;\n  } catch (error) {\n    return '';\n  }\n};\nexport const getWhenSchoolEnds = (offset) => {\n  try {\n    if (!localStorage.getItem('cachedSchedule')) return '';\n    let scheduleOBJ = JSON.parse(localStorage.getItem('cachedSchedule'));\n    let classData = JSON.parse(localStorage.getItem('cachedCourseInfo'));\n    let schedule = JSON.parse(scheduleOBJ.schedule.schedule);\n    let user = JSON.parse(localStorage.getItem('user'));\n    let allClasses = scheduleOBJ.classes;\n    let convertedMoment = moment().tz(schedule.timePeriod).utcOffset();\n    let currentMoment = moment().utcOffset();\n    let currentTime = moment();\n    let getPeriodName = (periodID) => {\n      return (\n        JSON.parse(scheduleOBJ.schedule.nameOverrides)[periodID] || 'Break'\n      );\n    };\n    let scheduleDay = moment(Date.now());\n    let ogHasOffset = !!offset;\n    if (offset)\n      offset = (scheduleDay.isoWeekday() - 1 + (((offset % 7) + 7) % 7)) % 7;\n    else offset = scheduleDay.isoWeekday() - 1;\n    let dotw = [\n      'monday',\n      'tuesday',\n      'wednesday',\n      'thursday',\n      'friday',\n      'saturday',\n      'sunday',\n    ][offset];\n    let formattedClasses =\n      schedule[dotw] &&\n      schedule[dotw]\n        .map((clas) => {\n          let courseInfo = classData.filter(\n            (x) => x.course.id === allClasses[clas.period].value\n          ).length\n            ? allClasses[clas.period]\n            : null;\n          if (!courseInfo && clas.period !== 'break') return null;\n          return {\n            period: clas.period,\n            timeStart:\n              moment(clas.timeStart, 'hh:mma')\n                .add((convertedMoment - currentMoment) / 60, 'hours')\n                .unix() * 1000,\n            timeEnd:\n              moment(clas.timeEnd, 'hh:mma')\n                .add((convertedMoment - currentMoment) / 60, 'hours')\n                .unix() * 1000,\n            endTime: clas.timeEnd,\n          };\n        })\n        .filter((x) => x);\n    formattedClasses.sort((a, b) => b.timeEnd - a.timeEnd);\n    if (!formattedClasses.length) return 'No school today!';\n    return ``;\n  } catch (er) {\n    console.trace(er);\n  }\n};\nexport default getTimePhrase;\n","class Notifications {\n  constructor() {\n    if (Notification.permission !== 'granted') {\n      Notification.requestPermission();\n    }\n  }\n  static pushNotification(icon, img, title, text) {\n    try {\n      if (Notification.permission !== 'granted') {\n        Notification.requestPermission();\n      }\n      return new Notification(title || 'HWBounty Notification', {\n        body: text || '',\n        icon: icon,\n        image: img,\n      });\n    } catch (error) {}\n  }\n}\nexport default Notifications;\n","import moment from 'moment';\n\nimport { Typography } from '@material-ui/core';\n\nexport const CTime = (props) => {\n  return (\n    <div\n      style={{\n        verticalAlign: 'middle',\n        width: '100%',\n        minWidth: '100%',\n      }}\n    >\n      <Typography\n        variant=\"h5\"\n        style={{\n          fontSize: '3.5vw',\n          fontFamily: 'Poppins',\n        }}\n      >\n        {\n          /*moment().format(window.innerWidth <= 1368 ? \"M/D/YYYY h:mm:ss A\" : \"dddd MMMM Do h:mm:ss A\")*/ moment().format(\n            'h:mm:ss A'\n          )\n        }\n      </Typography>\n      <Typography\n        variant=\"h5\"\n        style={{\n          fontSize: '1.65vw',\n          fontFamily: 'Poppins',\n          fontWeight: '20',\n        }}\n      >\n        {\n          /*moment().format(window.innerWidth <= 1368 ? \"M/D/YYYY h:mm:ss A\" : \"dddd MMMM Do h:mm:ss A\")*/ moment().format(\n            'dddd M/D/YYYY'\n          )\n        }\n      </Typography>\n    </div>\n  );\n};\nexport const CTime2 = (props) => {\n  return (\n    <div>\n      <Typography\n        variant=\"h5\"\n        style={{\n          fontSize: '3rem',\n          fontFamily: 'Poppins',\n        }}\n      >\n        {\n          /*moment().format(window.innerWidth <= 1368 ? \"M/D/YYYY h:mm:ss A\" : \"dddd MMMM Do h:mm:ss A\")*/ moment().format(\n            'h:mm:ss A'\n          )\n        }\n      </Typography>\n      <Typography\n        variant=\"h5\"\n        style={{\n          fontSize: '2rem',\n          fontFamily: 'Poppins',\n          fontWeight: '20',\n        }}\n      >\n        {\n          /*moment().format(window.innerWidth <= 1368 ? \"M/D/YYYY h:mm:ss A\" : \"dddd MMMM Do h:mm:ss A\")*/ moment().format(\n            'dddd M/D/YYYY'\n          )\n        }\n      </Typography>\n    </div>\n  );\n};\nexport default CTime;\n","import React from 'react';\n\nimport { makeStyles, Card, Typography } from '@material-ui/core';\n\nimport { connect } from 'react-redux';\n\nimport moment from 'moment';\nimport 'moment-timezone';\nconst useStyles = makeStyles((theme) => ({\n  cardTitle: {\n    fontFamily: 'Raleway',\n    fontSize: '2.5rem',\n  },\n  cardSubtitles1: {\n    fontFamily: 'Raleway',\n    fontSize: '1.25rem',\n    fontWeight: '200',\n  },\n  card: {\n    boxShadow: (theme) =>\n      theme === 1\n        ? '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)!important'\n        : '0 3px 6px rgba(0,0,0,0.1), 0 3px 6px rgba(0,0,0,0.01)!important',\n  },\n}));\nconst generatePeriodColors = (stops, theme) => {\n  let retarr = [];\n  for (let index = 0; index < stops; index++)\n    //50 => 25, 70 => 30 for Dark mode\n\n    retarr.push([0 + (index / stops) * 360, 0, theme ? 30 : 70]);\n  return retarr;\n};\nconst parsePeriods = (scheduleData, zoomLinkInfo, theme, offset) => {\n  let scheduleDay = moment(Date.now());\n  let ogHasOffset = offset;\n  if (offset)\n    offset = (scheduleDay.isoWeekday() - 1 + (((offset % 7) + 7) % 7)) % 7;\n  else offset = scheduleDay.isoWeekday() - 1;\n  let dotw = [\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday',\n    'sunday',\n  ][offset];\n  let allClasses = scheduleData.classes || {};\n  let classes = new Map();\n  let nameOverrides = JSON.parse(scheduleData.schedule.nameOverrides);\n  let convertedMoment = moment()\n    .tz(JSON.parse(scheduleData.schedule.schedule).timePeriod)\n    .utcOffset();\n  let currentMoment = moment().utcOffset();\n  if (zoomLinkInfo?.length)\n    zoomLinkInfo.forEach((x) => {\n      classes.set(x.course.id, x);\n    });\n  let today = JSON.parse(scheduleData.schedule.schedule)[dotw];\n  let colors = generatePeriodColors(today.length, theme);\n  return today\n    .map((x, i) => {\n      let courseInfo = classes.has(\n        allClasses[x.period] && allClasses[x.period].value\n      )\n        ? classes.get(allClasses[x.period] && allClasses[x.period].value)\n        : null;\n      // if (!(courseInfo) && x.period !== \"break\") return null;\n      return {\n        period: nameOverrides[x.period] || x.period,\n        color: colors[i],\n        name:\n          courseInfo && courseInfo.course\n            ? courseInfo.course.course_title\n            : nameOverrides[x.period],\n        zoom:\n          courseInfo && courseInfo.links\n            ? courseInfo.links\n                .map((linkGroup) => {\n                  return linkGroup.links.map((link) => {\n                    return { link: link, title: decodeHTML(linkGroup.title) };\n                  });\n                })\n                .flat(10000)\n            : [],\n        timeStart:\n          moment(x.timeStart, 'hh:mma')\n            .add((convertedMoment - currentMoment) / 60, 'hours')\n            .unix() * 1000,\n        timeEnd:\n          moment(x.timeEnd, 'hh:mma')\n            .add((convertedMoment - currentMoment) / 60, 'hours')\n            .unix() * 1000,\n        tSS: x.timeStart,\n        tES: x.timeEnd,\n        duration: x.timeEnd - x.timeStart,\n        nofill: ogHasOffset,\n      };\n    })\n    .filter((x) => x);\n};\nconst PeriodList = (props) => {\n  const classes = useStyles(props.UI.theme);\n  const periodData = parsePeriods(\n    props.scheduleData,\n    props.zoomLinkInfo,\n    props.UI.theme,\n    props.offset\n  );\n  let periodColors = generatePeriodColors(periodData.length, 0);\n  let periodMapped = periodData.map((periodData, i) => {\n    return (\n      <PeriodButton\n        color={props.UI.theme ? 'rgb(40,40,40)' : `rgb(250,250,250)`}\n        name={periodData.name}\n        UI={props.UI}\n        startTime={periodData.tSS}\n        endTime={periodData.tES}\n        duration={`${Math.round(\n          (periodData.timeEnd - periodData.timeStart) / (1000 * 60)\n        )} minutes`}\n      />\n    );\n  });\n\n  return <div>{React.Children.toArray(periodMapped)}</div>;\n};\nconst cardWidth = '25vw';\nconst cardHeight = '9rem';\nconst PeriodButton = (props) => {\n  const classes = useStyles(props.UI.theme);\n  return (\n    <Card\n      style={{\n        borderRadius: '0.5rem',\n        backgroundColor: props.color,\n        width: `clamp(${cardWidth},${cardWidth},${cardWidth})`,\n        height: `clamp(${cardHeight},${cardHeight},${cardHeight})`,\n        display: 'flex',\n        padding: '1.5rem',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        margin: '2rem',\n      }}\n      className={`${classes.card}`}\n    >\n      <Typography\n        className={`${classes.cardTitle}`}\n        style={{ color: props.UI.theme === 1 ? 'white' : 'rgb(110,110,110)' }}\n      >\n        {props.name}\n      </Typography>\n      <Typography\n        className={`${classes.cardSubtitles1}`}\n      >{`${props.startTime} - ${props.endTime} (${props.duration})`}</Typography>\n    </Card>\n  );\n};\nconst mapStateToProps = (state) => ({\n  UI: state.UI,\n});\n\nexport default connect(mapStateToProps)(PeriodList);\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// MUI\nimport Card from '@material-ui/core/Card';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport {\n  Container,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  Typography,\n} from '@material-ui/core';\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon } from '@material-ui/lab';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Today } from '@material-ui/icons';\n\n// Redux\nimport { connect } from 'react-redux';\n\nimport { CTime2 } from '../Home/CTime';\nimport PeriodList from './PeriodList';\nimport TetLib from '../../util/TetLib';\nimport useForceUpdate from '../../util/useForceUpdate';\n\nconst decodeHTML = (string) => {\n  const map = { gt: '>' /* , … */ };\n  return string.replace(/&(#(?:x[0-9a-f]+|\\d+)|[a-z]+);?/gi, ($0, $1) => {\n    if ($1[0] === '#') {\n      return String.fromCharCode(\n        $1[1].toLowerCase() === 'x'\n          ? parseInt($1.substr(2), 16)\n          : parseInt($1.substr(1), 10)\n      );\n    } else {\n      return map.hasOwnProperty($1) ? map[$1] : $0;\n    }\n  });\n};\nconst useButtonStyles = makeStyles({\n  root: {\n    border: 0,\n    borderRadius: '1rem!important',\n    marginTop: '2vw',\n    paddingBottom: 10,\n    display: 'block',\n    cursor: 'pointer',\n    position: 'relative',\n    boxShadow: ' 4px 6px 5px 4px rgba(0,0,0,0.2)!important',\n  },\n});\nconst useStyles = makeStyles((theme) => ({\n  fullHeight: {\n    height: '100%',\n    minHeight: '100%',\n    maxHeight: '100%',\n  },\n  card: {\n    boxShadow: (theme) =>\n      theme === 1\n        ? '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)!important'\n        : '0 3px 6px rgba(0,0,0,0.1), 0 3px 6px rgba(0,0,0,0.01)!important',\n    background: (theme) => (theme === 1 ? 'rgb(40,40,40)' : 'rgb(250,250,250)'),\n    borderRadius: '1vmin',\n  },\n  popupTitle: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    fontFamily: 'Roboto, sans-serif',\n  },\n  themedText: {\n    color: (theme) =>\n      theme === 1 ? 'rgb(255,255,255)!important' : 'rgb(0,0,0)!o',\n  },\n}));\nconst DesktopSchedulePage = (props) => {\n  const {\n    UI: { theme },\n    user,\n    schedule,\n  } = props;\n  const forceUpdate = useForceUpdate();\n  const [scheduleData, setScheduleData] = useState(false);\n  const [speedDialOpen, setSpeedDialOpen] = useState(false);\n  const [alternateScheduleDialog, setAlternateScheduleDialog] = useState(false);\n  const handleOpen = () => {\n    setSpeedDialOpen(true);\n  };\n\n  const handleClose = () => {\n    setSpeedDialOpen(false);\n  };\n  const handleCloseAlternateScheduleDialog = () => {\n    setAlternateScheduleDialog(false);\n  };\n  const { sleep } = TetLib;\n  const speedDialActions = [];\n  if (user?.authenticated) {\n    speedDialActions.push({ icon: <EditIcon />, name: 'Create a new event' });\n  }\n  if (user?.user?.privateID === schedule?.schedule?.createdBy) {\n    speedDialActions.push({\n      icon: <Today />,\n      name: 'Add an Alternate Schedule Day',\n      runID: 'openAlternateSchedule',\n    });\n  }\n  const onSpeedDialAction = (name) => {\n    handleClose();\n    if (name === 'openAlternateSchedule') {\n      setAlternateScheduleDialog(true);\n    }\n  };\n\n  useEffect(() => {\n    let run = true;\n    (async () => {\n      await sleep(250 - (Date.now() % 250));\n      let lastTime = Date.now();\n      while (run) {\n        await sleep(250 - (Date.now() % 250));\n        forceUpdate();\n        lastTime = Date.now();\n      }\n    })();\n    return () => {\n      run = false;\n    };\n  }, []);\n  const renderMain = () => {\n    if (!document.getElementById('divSize')) {\n      setTimeout(() => forceUpdate(), 1);\n      return null;\n    }\n\n    return (\n      <div\n        style={{\n          // width: \"clamp(0vw, 30%, 50vw)\",\n          flexGrow: '1',\n          marginTop: '2rem',\n          marginLeft: '5rem',\n          position: 'fixed',\n          marginRight: '5rem',\n        }}\n        className={`${classes.fullHeight}`}\n      >\n        <Card\n          className={classes.card}\n          style={{\n            margin: '0 auto',\n            maxHeight: '95%',\n            minHeight: '95%',\n            padding: '1rem',\n            width: `calc(${\n              document.getElementById('divSize').offsetWidth\n            }px - 6rem)`,\n          }}\n        >\n          <CTime2 />\n          <br />\n          <Divider />\n        </Card>\n      </div>\n    );\n  };\n  const classes = useStyles(theme);\n  if (!schedule) return null;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        maxwidth: 'calc(100vw - 5rem)',\n        position: 'relative',\n      }}\n      className={`${classes.fullHeight}`}\n    >\n      <div style={{ flexGrow: '1' }} id=\"divSize\">\n        {renderMain()}\n      </div>\n      <Container\n        style={{\n          display: 'flex',\n          /*backgroundColor: \"black\",*/ justifyContent: 'center',\n          width: '33vw',\n        }}\n        className={`${classes.fullHeight}`}\n      >\n        <PeriodList scheduleData={schedule} zoomLinkInfo={[]} offset={0} />\n      </Container>\n      <SpeedDial\n        ariaLabel=\"SpeedDial openIcon example\"\n        className={classes.speedDial}\n        hidden={speedDialActions.length == 0}\n        icon={<SpeedDialIcon />}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={speedDialOpen}\n        style={{ position: 'fixed', bottom: '16px', right: '16px' }}\n      >\n        {speedDialActions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={() => {\n              onSpeedDialAction(action.runID);\n            }}\n          />\n        ))}\n      </SpeedDial>\n      <Dialog\n        fullWidth={true}\n        maxWidth={'xl'}\n        open={alternateScheduleDialog}\n        onClose={handleCloseAlternateScheduleDialog}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle className={`${classes.themedText}`}>\n          Create an Alternate Schedule Day{' '}\n        </DialogTitle>\n        <DialogContent style={{ height: '512px' }}>\n          <Typography color=\"textPrimary\">hi!</Typography>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  UI: state.UI,\n  user: state.user,\n});\nconst mapActionsToProps = {};\nexport default connect(mapStateToProps, mapActionsToProps)(DesktopSchedulePage);\n","// React\nimport React, { useEffect, useState } from 'react';\n\n// MUI\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport moment from 'moment-timezone';\nimport { CircularProgress, Container } from '@material-ui/core';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { linkUserSchoology } from '../../redux/actions/userActions';\n\nimport axios from 'axios';\n// Translations\nimport t from '../../util/localization/localization';\nimport { useSnackbar } from 'notistack';\nimport TetLib from '../../util/TetLib';\n\nconst decodeHTML = (string) => {\n  const map = { gt: '>' /* , … */ };\n  return string.replace(/&(#(?:x[0-9a-f]+|\\d+)|[a-z]+);?/gi, ($0, $1) => {\n    if ($1[0] === '#') {\n      return String.fromCharCode(\n        $1[1].toLowerCase() === 'x'\n          ? parseInt($1.substr(2), 16)\n          : parseInt($1.substr(1), 10)\n      );\n    } else {\n      return map.hasOwnProperty($1) ? map[$1] : $0;\n    }\n  });\n};\nconst useButtonStyles = makeStyles({\n  root: {\n    border: 0,\n    borderRadius: '1rem!important',\n    marginTop: '2vw',\n    paddingBottom: 10,\n    display: 'block',\n    cursor: 'pointer',\n    position: 'relative',\n    boxShadow: (theme) =>\n      theme === 1\n        ? '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)!important'\n        : '0 3px 6px rgba(0,0,0,0.1), 0 3px 6px rgba(0,0,0,0.01)!important',\n  },\n});\n\nconst generatePeriodColors = (stops, theme) => {\n  return [\n    [248, 255, 229],\n    [6, 214, 160],\n    [27, 154, 170],\n    [44, 66, 63],\n    [255, 196, 61],\n    [232, 93, 117],\n    [153, 95, 163],\n    [255, 74, 28],\n  ].splice(0, stops);\n};\n\nconst PeriodButton = (props) => {\n  const classes = useButtonStyles();\n  const {\n    theme,\n    period,\n    name,\n    zoom,\n    color,\n    timeStart,\n    timeEnd,\n    tSS,\n    tES,\n    duration,\n    nofill,\n    periodID,\n  } = props;\n  //% from 0 to 100\n  const { enqueueSnackbar } = useSnackbar();\n  let timePassed = 0;\n  //If we are past the end time, set time passed to 100%\n  if (nofill > 0) timePassed = 0;\n  else if (nofill < 0) timePassed = 100;\n  else if (Date.now() - timeEnd > 0) timePassed = 100;\n  //If we are in class, set time passed to (current-start)/(End-start) * 100\n  else if (Date.now() - timeStart > 0 && timeEnd - Date.now() > 0)\n    timePassed = ((Date.now() - timeStart) * 100) / (timeEnd - timeStart);\n  //If the class is upcoming, set time passed to 0\n  else timePassed = 0;\n  const [expanded, setExpanded] = React.useState(false);\n  const handleButtonClicked = () => {\n    if (zoom.length) setExpanded(!expanded);\n    else enqueueSnackbar('No Zoom Links found for this class!');\n  };\n\n  const handleZoomLinkClicked = (event, link) => {\n    event.stopPropagation();\n    const newWindow = window.open(link, '_blank', 'noopener,noreferrer');\n    if (newWindow) newWindow.opener = null;\n  };\n  let notDoneCol = color.filter((x) => true);\n\n  //Set to 40 for Darkmode\n  notDoneCol[2] = theme ? 70 : 90;\n  color[2] = theme ? 70 : 80;\n  return (\n    <div\n      style={{\n        marginBottom: '2vh',\n      }}\n    >\n      <Card\n        className={classes.root}\n        onClick={handleButtonClicked}\n        style={{\n          background: `linear-gradient(90deg, hsl(${color[0]},${color[1]}%,${color[2]\n            }%) 0%, hsl(${color[0]},${color[1]}%,${color[2]\n            }%) ${timePassed}%, hsla(${notDoneCol[0]},${notDoneCol[1]}%,${notDoneCol[2]\n            }%,0.7) ${timePassed + 0.000001}%, hsla(${notDoneCol[0]},${notDoneCol[1]\n            }%,${notDoneCol[2]}%,0.7) 100%)`,\n          borderRadius: '0.1rem!important',\n          padding: '10px',\n        }}\n      >\n        <Typography\n          variant=\"h5\"\n          align=\"left\"\n          style={{\n            marginLeft: '4%',\n            fontSize: window.innerWidth ** 0.4 + 32,\n            marginBottom: window.innerWidth <= 960 ? '12%' : '6%',\n            position: 'relative',\n            marginTop: window.innerWidth <= 960 ? '4%' : '2%',\n            // left: \"5%\"\n          }}\n        >\n          {name}\n        </Typography>\n        {expanded ? null : (\n          <Typography\n            align=\"left\"\n            variant=\"h5\"\n            style={{\n              fontSize:\n                window.innerWidth <= 960\n                  ? window.innerWidth ** 0.3 + 10\n                  : window.innerWidth ** 0.4 + 10,\n              margin: 10,\n              marginBottom: 10,\n              marginTop: 0,\n              bottom: window.innerWidth <= 960 ? '70%' : '1%',\n              left: '4%',\n              bottom: '10%',\n              position: 'absolute',\n              fontFamily: \"'Nunito'\",\n            }}\n          >\n            {t('schedule.minsFormatting', {\n              period,\n              tSS,\n              tES,\n              mins: Math.round(duration / 60000),\n            })}\n          </Typography>\n        )}\n\n        <Collapse in={expanded}>\n          {React.Children.toArray(\n            zoom.map((z) => {\n              return (\n                <Button onClick={(e) => handleZoomLinkClicked(e, z.link)}>\n                  {z.title}\n                </Button>\n              );\n            })\n          )}\n        </Collapse>\n      </Card>\n    </div>\n  );\n};\n\nconst parsePeriods = (scheduleData, zoomLinkInfo, theme, offset) => {\n  let scheduleDay = moment(Date.now());\n  let ogHasOffset = offset;\n  if (offset)\n    offset = (scheduleDay.isoWeekday() - 1 + (((offset % 7) + 7) % 7)) % 7;\n  else offset = scheduleDay.isoWeekday() - 1;\n  let dotw = [\n    'monday',\n    'tuesday',\n    'wednesday',\n    'thursday',\n    'friday',\n    'saturday',\n    'sunday',\n  ][offset];\n  let allClasses = scheduleData.classes || {};\n  let classes = new Map();\n  let nameOverrides = JSON.parse(scheduleData.schedule.nameOverrides);\n  let convertedMoment = moment()\n    .tz(JSON.parse(scheduleData.schedule.schedule).timePeriod)\n    .utcOffset();\n  let currentMoment = moment().utcOffset();\n  if (zoomLinkInfo?.length)\n    zoomLinkInfo.forEach((x) => {\n      classes.set(x.course.id, x);\n    });\n  let today = JSON.parse(scheduleData.schedule.schedule)[dotw];\n  let colors = generatePeriodColors(today.length, theme);\n  return today\n    .map((x, i) => {\n      let courseInfo = classes.has(\n        allClasses[x.period] && allClasses[x.period].value\n      )\n        ? classes.get(allClasses[x.period] && allClasses[x.period].value)\n        : null;\n      // if (!(courseInfo) && x.period !== \"break\") return null;\n      return {\n        period: nameOverrides[x.period] || x.period,\n        periodID: x.period,\n        color: colors[i],\n        name:\n          courseInfo && courseInfo.course\n            ? courseInfo.course.course_title\n            : nameOverrides[x.period],\n        zoom:\n          courseInfo && courseInfo.links\n            ? courseInfo.links\n              .map((linkGroup) => {\n                return linkGroup.links.map((link) => {\n                  return { link: link, title: decodeHTML(linkGroup.title) };\n                });\n              })\n              .flat(10000)\n            : [],\n        timeStart:\n          moment(x.timeStart, 'hh:mma')\n            .add((convertedMoment - currentMoment) / 60, 'hours')\n            .unix() * 1000,\n        timeEnd:\n          moment(x.timeEnd, 'hh:mma')\n            .add((convertedMoment - currentMoment) / 60, 'hours')\n            .unix() * 1000,\n        tSS: x.timeStart,\n        tES: x.timeEnd,\n        duration: x.timeEnd - x.timeStart,\n        nofill: ogHasOffset,\n      };\n    })\n    .filter((x) => x);\n};\nlet done = false;\nconst fetchAndSet = async (setCourseInfo, setScheduleData, setCannotFetch) => {\n  try {\n    if (localStorage.getItem('cachedSchedule'))\n      setScheduleData(JSON.parse(localStorage.getItem('cachedSchedule')));\n    if (localStorage.getItem('cachedCourseInfo'))\n      setCourseInfo(JSON.parse(localStorage.getItem('cachedCourseInfo')));\n  } catch (error) {\n    console.trace(error);\n    setCannotFetch(true);\n  }\n};\nconst useForceUpdate = () => {\n  const set = useState(0)[1];\n  return () => set((s) => s + 1);\n};\nexport const Schedule = (props) => {\n  const {\n    UI: { theme },\n  } = props;\n  const dayOffset = props.dayOffset;\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    let run = true;\n    (async () => {\n      await TetLib.sleep(1000 - (Date.now() % 1000));\n      while (run) {\n        await TetLib.sleep(1000);\n        forceUpdate();\n      }\n    })();\n    return () => {\n      run = false;\n    };\n  }, []);\n  const [courseInfo, setCourseInfo] = useState(null);\n  const [scheduleData, setScheduleData] = useState(null);\n  const [fetching, setFetching] = useState(false);\n  const [cannotFetch, setCannotFetch] = useState(false);\n  if (\n    (!scheduleData && !courseInfo) ||\n    (!scheduleData && localStorage.getItem('anonStorage'))\n  ) {\n    if (!fetching) {\n      setFetching(true);\n      fetchAndSet(setCourseInfo, setScheduleData, setCannotFetch);\n      return null;\n    }\n    if (cannotFetch)\n      return (\n        <div>\n          <Typography>{t('schedule.linkSchoologyPrompt')}</Typography>\n          <Button\n            variant=\"contained\"\n            onClick={(x) => {\n              linkUserSchoology();\n            }}\n          >\n            {t('schedule.linkSchoology')}\n          </Button>\n        </div>\n      );\n    return (\n      <div>\n        <Typography>{t('schedule.fetching')}</Typography>\n        <CircularProgress />\n      </div>\n    );\n  }\n  if (!scheduleData?.schedule)\n    return (\n      <div>\n        <Typography>{t('schedule.noSchedule')}</Typography>\n      </div>\n    );\n  const periods = parsePeriods(scheduleData, courseInfo, theme, dayOffset);\n  return (\n    <Container style={{ marginBottom: '50px', width: '100%', padding: '0px' }}>\n      {React.Children.toArray(\n        periods.map((p) => {\n          return (\n            <PeriodButton\n              theme={theme}\n              period={p.period}\n              name={p.name}\n              zoom={p.zoom}\n              color={p.color}\n              timeStart={p.timeStart}\n              timeEnd={p.timeEnd}\n              tSS={p.tSS}\n              tES={p.tES}\n              duration={p.timeEnd - p.timeStart}\n              nofill={p.nofill}\n              periodID={p.periodID}\n            />\n          );\n        })\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  UI: state.UI,\n});\n\nexport default connect(mapStateToProps)(Schedule);\n","import moment from \"moment\";\n\nexport const getTimePhrase = (offset) => {\n  try {\n    if (!localStorage.getItem('cachedSchedule')) return '';\n    let scheduleOBJ = JSON.parse(localStorage.getItem('cachedSchedule'));\n    let schedule = JSON.parse(scheduleOBJ.schedule.schedule);\n    let user = JSON.parse(localStorage.getItem('user'));\n    let allClasses = scheduleOBJ.classes;\n    let convertedMoment = moment().tz(schedule.timePeriod).utcOffset();\n    let currentMoment = moment().utcOffset();\n    let currentTime = moment();\n    let getPeriodName = (periodID) => {\n      return (\n        JSON.parse(scheduleOBJ.schedule.nameOverrides)[periodID] || 'Break'\n      );\n    };\n    let dotw = [\n      'monday',\n      'tuesday',\n      'wednesday',\n      'thursday',\n      'friday',\n      'saturday',\n      'sunday',\n    ][moment().isoWeekday() - 1];\n    let formattedClasses =\n      schedule[dotw] &&\n      schedule[dotw].map((clas) => {\n        return {\n          period: clas.period,\n          timeStart:\n            moment(clas.timeStart, 'hh:mma')\n              .add((convertedMoment - currentMoment) / 60, 'hours')\n              .unix() * 1000,\n          timeEnd:\n            moment(clas.timeEnd, 'hh:mma')\n              .add((convertedMoment - currentMoment) / 60, 'hours')\n              .unix() * 1000,\n        };\n      });\n\n    //Check for current class first\n    let currentClass = formattedClasses.filter(\n      (x) => x.timeStart < Date.now() && Date.now() < x.timeEnd\n    )[0];\n\n    if (currentClass) {\n      let endingInString = `${currentClass.timeEnd - Date.now() > 60000\n        ? currentClass.timeEnd - Date.now() > 3600000\n          ? `${Math.round(\n            moment.duration(currentClass.timeEnd - Date.now()).asHours()\n          )} hours`\n          : `${Math.round(\n            moment.duration(currentClass.timeEnd - Date.now()).asMinutes()\n          )} minutes`\n        : `${Math.round(\n          moment.duration(currentClass.timeEnd - Date.now()).asSeconds()\n        )} seconds`\n        }`;\n\n      //Try to push a notif if class is starting soon\n      if (\n        currentClass.timeEnd - Date.now() < 120 * 1000 &&\n        Date.now() - lastTimeBasedNotif > 240 * 1000\n      ) {\n        lastTimeBasedNotif = Date.now();\n\n        Notifications.pushNotification(\n          undefined,\n          undefined,\n          `${getPeriodName(currentClass.period)} is ending soon!`,\n          `Hey ${user?.firstName || ''}, ${getPeriodName(\n            currentClass.period\n          )} is about to end in ${endingInString}!`\n        );\n      }\n\n      return `${getPeriodName(currentClass.period)} ends in ${endingInString}`;\n    }\n    //Check for next upcoming class\n    let nextClass = formattedClasses.filter((x) => x.timeStart > Date.now())[0];\n\n    if (nextClass) {\n      let startingInString = `${nextClass.timeStart - Date.now() > 60000\n        ? nextClass.timeStart - Date.now() > 3600000\n          ? `${Math.round(\n            moment.duration(nextClass.timeStart - Date.now()).asHours()\n          )} hours`\n          : `${Math.round(\n            moment.duration(nextClass.timeStart - Date.now()).asMinutes()\n          )} minutes`\n        : `${Math.round(\n          moment.duration(nextClass.timeStart - Date.now()).asSeconds()\n        )} seconds`\n        }`;\n      if (\n        nextClass.timeStart - Date.now() < 120 * 1000 &&\n        Date.now() - lastTimeBasedNotif > 240 * 1000\n      ) {\n        lastTimeBasedNotif = Date.now();\n\n        Notifications.pushNotification(\n          undefined,\n          undefined,\n          `${getPeriodName(nextClass.period)} is starting soon!`,\n          `Hey ${user?.firstName || ''}, ${getPeriodName(\n            nextClass.period\n          )} is about to start in ${startingInString}!`\n        );\n      }\n\n      return `${getPeriodName(nextClass.period)} starts in ${startingInString}`;\n    }\n\n    //Check for what was the previous class\n    let lastClass = formattedClasses\n      .filter((x) => Date.now() > x.timeEnd)\n      .pop();\n    if (lastClass) {\n      let lastEnded = `${Date.now() - lastClass.timeEnd > 60000\n        ? Date.now() - lastClass.timeEnd > 60000\n          ? `${Math.round(\n            moment.duration(Date.now() - lastClass.timeEnd).asHours()\n          )} hours`\n          : `${Math.round(\n            moment.duration(Date.now() - lastClass.timeEnd).asMinutes()\n          )} minutes`\n        : `${Math.round(\n          moment.duration(Date.now() - lastClass.timeEnd).asSeconds()\n        )} seconds`\n        }`;\n      return `${getPeriodName(lastClass.period)} ended ${lastEnded} ago`;\n    }\n\n    //If no classes exist for the day\n    return `No classes today! Take a break, you deserve it :)`;\n  } catch (error) {\n    return '';\n  }\n};\nexport default getTimePhrase;\n","import moment from \"moment\";\n\nexport const getScheduleTimeEnd = (offset) => {\n  try {\n    if (!localStorage.getItem(\"cachedSchedule\")) return \"\";\n    let scheduleOBJ = JSON.parse(localStorage.getItem(\"cachedSchedule\"));\n    let schedule = JSON.parse(scheduleOBJ.schedule.schedule);\n    let user = JSON.parse(localStorage.getItem(\"user\"));\n    let allClasses = scheduleOBJ.classes;\n    let convertedMoment = moment().tz(schedule.timePeriod).utcOffset();\n    let currentMoment = moment().utcOffset();\n    let currentTime = moment();\n    let getPeriodName = (periodID) => {\n      return (\n        JSON.parse(scheduleOBJ.schedule.nameOverrides)[periodID] || \"Break\"\n      );\n    };\n    let dotw = [\n      \"monday\",\n      \"tuesday\",\n      \"wednesday\",\n      \"thursday\",\n      \"friday\",\n      \"saturday\",\n      \"sunday\",\n    ][(moment().isoWeekday() - 1 + (offset || 0)) % 7];\n    let formattedClasses =\n      schedule[dotw] &&\n      schedule[dotw].map((clas) => {\n        return {\n          period: clas.period,\n          timeStart:\n            moment(clas.timeStart, \"hh:mma\")\n              .add((convertedMoment - currentMoment) / 60, \"hours\")\n              .unix() * 1000,\n          timeEnd:\n            moment(clas.timeEnd, \"hh:mma\")\n              .add((convertedMoment - currentMoment) / 60, \"hours\")\n              .unix() * 1000,\n        };\n      });\n\n    //Check for current class first\n    let currentClass = formattedClasses.sort(\n      (a, b) => b.timeStart - a.timeStart\n    )[0];\n    if (!currentClass)\n      return null;\n    else\n      return (<div>Class ends at <b>{moment(currentClass.timeEnd).format(\"h:mm a\")}</b> today.</div>);\n    //If no classes exist for the day\n  } catch (error) {\n    console.trace(error)\n    return \"\";\n  }\n}\nexport default getScheduleTimeEnd;","import { Component, useEffect, useState } from 'react';\n\nimport { Button, Card, IconButton, Snackbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons';\n\nimport moment from 'moment';\n\nimport { connect } from 'react-redux';\n\nimport { withSnackbar } from 'notistack';\n\nimport Schedule from './Schedule';\nimport Notifications from '../../util/notifications';\nimport { getWhenSchoolEnds } from '../../util/getTimePhrase';\nimport { getTimePhrase } from '../../util/getScheduleTimePhrase';\nimport { getScheduleTimeEnd } from '../../util/getScheduleTimeEnd';\nimport TetLib from '../../util/TetLib';\nimport useForceUpdate from '../../util/useForceUpdate';\n\nlet lastTimeBasedNotif = 0;\nconst MobileSchedulePage = (props) => {\n  const forceUpdate = useForceUpdate();\n  const [offset, setOffset] = useState(0);\n  const [popupForceClosed, setPopupForceClosed] = useState(false);\n  const goBackADay = () => {\n    setOffset(offset - 1);\n  };\n  const fastForwardADay = () => {\n    setOffset(offset + 1);\n  };\n  let adjustedMoment = moment().add(offset * 24, 'hours');\n  useEffect(() => {\n    let run = true;\n    (async () => {\n      await TetLib.sleep(1000 - (Date.now() % 1000));\n      while (run) {\n        await TetLib.sleep(1000);\n        forceUpdate();\n      }\n    })();\n    return () => {\n      run = false;\n    };\n  }, []);\n  return (\n    <div\n      style={{\n        marginTop: '5%',\n      }}\n    >\n      <Card\n        style={{\n          padding: '2%',\n          paddingBottom: '0%',\n          margin: '5%',\n          /* max-height: 50vw!important; */\n          /* height: 50vw; */\n          width: '90%',\n\n          borderRadius: 5,\n          borderWidth: 0,\n          background: 'rgba(0,0,0,0)',\n        }}\n      >\n        <div>\n          <span\n            style={{\n              display: 'inline-flex',\n              alignItems: 'center',\n            }}\n          >\n            <IconButton onClick={goBackADay}>\n              {' '}\n              <ChevronLeft />{' '}\n            </IconButton>{' '}\n            <Typography\n              style={{\n                fontFamily: 'Poppins',\n                fontWeight: '400',\n                fontSize: '24px',\n              }}\n            >\n              {adjustedMoment.format('MM/DD/YYYY')}\n            </Typography>\n            <IconButton onClick={fastForwardADay}>\n              {' '}\n              <ChevronRight />{' '}\n            </IconButton>\n          </span>\n          <div\n            style={{\n              verticalAlign: \"middle\",\n              width: \"100%\",\n              minWidth: \"100%\",\n            }}\n          >\n\n            <Typography\n              variant=\"h5\"\n              style={{\n                fontSize: \"5.65vw\",\n                fontFamily: \"Nunito\",\n                fontWeight: \"600\",\n              }}\n            >\n              {\n          /*moment().format(window.innerWidth <= 1368 ? \"M/D/YYYY h:mm:ss A\" : \"dddd MMMM Do h:mm:ss A\")*/ adjustedMoment.format(\n                \"dddd\"\n              )\n              }\n            </Typography>\n          </div>\n          <Typography\n            variant=\"h5\"\n            style={{\n              fontSize: 24,\n              fontFamily: \"Nunito\",\n            }}\n          >\n            {offset == 0 && getTimePhrase(offset)}\n          </Typography>\n          <br />\n          <br />\n          <Typography\n            variant=\"h5\"\n            style={{\n              fontSize: 16,\n              fontFamily: \"Nunito\",\n              textAlign: \"left\",\n            }}\n          >\n            {getScheduleTimeEnd(offset)}\n          </Typography>\n          <Snackbar\n            open={offset !== 0 && !popupForceClosed}\n          >\n            <Alert severity={\"info\"} onClose={(e, reason) => reason !== \"clickaway\" && setPopupForceClosed(true)}>\n              <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n                {offset !== 0 && `Now viewing the schedule ${offset < 0 && \"from\" || \"\"} ${adjustedMoment.fromNow()}.`}\n                <Button color=\"primary\" size=\"small\" onClick={(e, reason) => reason !== \"clickaway\" && setOffset(0)} style={{ paddingTop: \"0\", paddingBottom: \"0\" }}>\n                  Take me back\n                </Button>\n              </div>\n            </Alert>\n          </Snackbar>\n        </div>\n        <Schedule dayOffset={offset} />\n      </Card>\n    </div >\n  );\n};\n// class ScheduleInfo extends Component {\n//   constructor(p) {\n//     super(p);\n//     setTimeout(\n//       () => setInterval(() => this.forceUpdate(), 1000),\n//       1000 - (Date.now() % 1000)\n//     );\n//     this.state = {\n//       offset: 0,\n//     };\n//   }\n//   goBackADay(salf) {\n//     salf.setState({ offset: salf.state.offset - 1 });\n//   }\n//   fastForwardADay(salf) {\n//     salf.setState({ offset: salf.state.offset + 1 });\n//   }\n//   getTimePhrase() {\n//     try {\n//       if (!localStorage.getItem(\"cachedSchedule\")) return \"\";\n//       let scheduleOBJ = JSON.parse(localStorage.getItem(\"cachedSchedule\"));\n//       let schedule = JSON.parse(scheduleOBJ.schedule.schedule);\n//       let user = JSON.parse(localStorage.getItem(\"user\"));\n//       let allClasses = scheduleOBJ.classes;\n//       let convertedMoment = moment().tz(schedule.timePeriod).utcOffset();\n//       let currentMoment = moment().utcOffset();\n//       let currentTime = moment();\n//       let getPeriodName = (periodID) => {\n//         return (\n//           JSON.parse(scheduleOBJ.schedule.nameOverrides)[periodID] || \"Break\"\n//         );\n//       };\n//       let dotw = [\n//         \"monday\",\n//         \"tuesday\",\n//         \"wednesday\",\n//         \"thursday\",\n//         \"friday\",\n//         \"saturday\",\n//         \"sunday\",\n//       ][moment().isoWeekday() - 1];\n//       let formattedClasses =\n//         schedule[dotw] &&\n//         schedule[dotw].map((clas) => {\n//           return {\n//             period: clas.period,\n//             timeStart:\n//               moment(clas.timeStart, \"hh:mma\")\n//                 .add((convertedMoment - currentMoment) / 60, \"hours\")\n//                 .unix() * 1000,\n//             timeEnd:\n//               moment(clas.timeEnd, \"hh:mma\")\n//                 .add((convertedMoment - currentMoment) / 60, \"hours\")\n//                 .unix() * 1000,\n//           };\n//         });\n//       //Check for current class first\n//       let currentClass = formattedClasses.filter(\n//         (x) => x.timeStart < Date.now() && Date.now() < x.timeEnd\n//       )[0];\n\n//       if (currentClass) {\n//         let endingInString = `${currentClass.timeEnd - Date.now() > 60000\n//           ? currentClass.timeEnd - Date.now() > 3600000\n//             ? `${Math.round(\n//               moment.duration(currentClass.timeEnd - Date.now()).asHours()\n//             )} hours`\n//             : `${Math.round(\n//               moment.duration(currentClass.timeEnd - Date.now()).asMinutes()\n//             )} minutes`\n//           : `${Math.round(\n//             moment.duration(currentClass.timeEnd - Date.now()).asSeconds()\n//           )} seconds`\n//           }`;\n\n//         //Try to push a notif if class is starting soon\n//         if (\n//           currentClass.timeEnd - Date.now() < 120 * 1000 &&\n//           Date.now() - lastTimeBasedNotif > 240 * 1000\n//         ) {\n//           lastTimeBasedNotif = Date.now();\n\n//           Notifications.pushNotification(\n//             undefined,\n//             undefined,\n//             `${getPeriodName(currentClass.period)} is ending soon!`,\n//             `Hey ${user.firstName}, ${getPeriodName(\n//               currentClass.period\n//             )} is about to end in ${endingInString}!`\n//           );\n//         }\n\n//         return `${getPeriodName(\n//           currentClass.period\n//         )} ends in ${endingInString}`;\n//       }\n//       //Check for next upcoming class\n//       let nextClass = formattedClasses.filter(\n//         (x) => x.timeStart > Date.now()\n//       )[0];\n\n//       if (nextClass) {\n//         let startingInString = `${nextClass.timeStart - Date.now() > 60000\n//           ? nextClass.timeStart - Date.now() > 3600000\n//             ? `${Math.round(\n//               moment.duration(nextClass.timeStart - Date.now()).asHours()\n//             )} hours`\n//             : `${Math.round(\n//               moment.duration(nextClass.timeStart - Date.now()).asMinutes()\n//             )} minutes`\n//           : `${Math.round(\n//             moment.duration(nextClass.timeStart - Date.now()).asSeconds()\n//           )} seconds`\n//           }`;\n//         if (\n//           nextClass.timeStart - Date.now() < 120 * 1000 &&\n//           Date.now() - lastTimeBasedNotif > 240 * 1000\n//         ) {\n//           lastTimeBasedNotif = Date.now();\n\n//           Notifications.pushNotification(\n//             undefined,\n//             undefined,\n//             `${getPeriodName(nextClass.period)} is starting soon!`,\n//             `Hey ${user.firstName}, ${getPeriodName(\n//               nextClass.period\n//             )} is about to start in ${startingInString}!`\n//           );\n//         }\n\n//         return `${getPeriodName(\n//           nextClass.period\n//         )} starts in ${startingInString}`;\n//       }\n\n//       //Check for what was the previous class\n//       let lastClass = formattedClasses\n//         .filter((x) => Date.now() > x.timeEnd)\n//         .pop();\n//       if (lastClass) {\n//         let lastEnded = `${Date.now() - lastClass.timeEnd > 60000\n//           ? Date.now() - lastClass.timeEnd > 60000\n//             ? `${Math.round(\n//               moment.duration(Date.now() - lastClass.timeEnd).asHours()\n//             )} hours`\n//             : `${Math.round(\n//               moment.duration(Date.now() - lastClass.timeEnd).asMinutes()\n//             )} minutes`\n//           : `${Math.round(\n//             moment.duration(Date.now() - lastClass.timeEnd).asSeconds()\n//           )} seconds`\n//           }`;\n//         return `${getPeriodName(lastClass.period)} ended ${lastEnded} ago`;\n//       }\n\n//       //If no classes exist for the day\n//       return `No classes today! Take a break, you deserve it :)`;\n//     } catch (error) {\n//       return \"\";\n//     }\n//   }\n//   render() {\n//     let offset = this.state.offset;\n//     let adjustedMoment = moment().add(offset * 24, \"hours\");\n//     if (window.innerWidth <= 1000) {\n//       return (\n//         <div\n//           style={{\n//             marginTop: \"5%\",\n//           }}\n//         >\n//           <Card\n//             style={{\n//               padding: \"2%\",\n//               paddingBottom: \"0%\",\n//               margin: \"5%\",\n//               /* max-height: 50vw!important; */\n//               /* height: 50vw; */\n//               width: \"90%\",\n\n//               borderRadius: 5,\n//               borderWidth: 0,\n//               background: \"rgba(0,0,0,0)\",\n//             }}\n//           >\n//             <div>\n//               <span\n//                 style={{\n//                   display: \"inline-flex\",\n//                   alignItems: \"center\",\n//                 }}\n//               >\n//                 <IconButton onClick={(x) => this.goBackADay(this)}>\n//                   {\" \"}\n//                   <ChevronLeft />{\" \"}\n//                 </IconButton>{\" \"}\n//                 <Typography\n//                   style={{\n//                     fontFamily: \"Poppins\",\n//                     fontWeight: \"400\",\n//                     fontSize: \"24px\",\n//                   }}\n//                 >\n//                   {adjustedMoment.format(\"MM/DD/YYYY\")}\n//                 </Typography>\n//                 <IconButton onClick={(x) => this.fastForwardADay(this)}>\n//                   {\" \"}\n//                   <ChevronRight />{\" \"}\n//                 </IconButton>\n//               </span>\n//               <CTimeSmall />\n//               <Typography\n//                 variant=\"h5\"\n//                 style={{\n//                   fontSize: 32,\n//                   fontFamily: \"Nunito\",\n//                 }}\n//               >\n//                 {this.getTimePhrase()}\n//               </Typography>\n//             </div>\n//             <Schedule dayOffset={offset} />\n//           </Card>\n//         </div>\n//       );\n//     }\n//     return (\n//       <div\n//         style={{\n//           marginTop: \"5%\",\n//         }}\n//       >\n//         <Card\n//           style={{\n//             padding: \"2%\",\n//             paddingBottom: \"0%\",\n//             /* max-height: 50vw!important; */\n//             /* height: 50vw; */\n//             width: \"60%\",\n//             maxWidth: \"60%\",\n//             display: \"inline-block\",\n//             background: \"rgba(0,0,0,0)\",\n//             borderRadius: 10,\n//             borderWidth: 0,\n//           }}\n//         >\n//           <div\n//             style={{\n//               textAlign: \"left\",\n//             }}\n//           >\n//             <span\n//               style={{\n//                 display: \"inline-flex\",\n//                 alignItems: \"center\",\n//               }}\n//             >\n//               <IconButton onClick={(x) => this.goBackADay(this)}>\n//                 {\" \"}\n//                 <ChevronLeft />{\" \"}\n//               </IconButton>{\" \"}\n//               <Typography\n//                 style={{\n//                   fontFamily: \"Poppins\",\n//                   fontWeight: \"400\",\n//                   fontSize: \"32px\",\n//                 }}\n//               >\n//                 {adjustedMoment.format(\"dddd MMMM D\")}\n//               </Typography>\n//               <IconButton onClick={(x) => this.fastForwardADay(this)}>\n//                 {\" \"}\n//                 <ChevronRight />{\" \"}\n//               </IconButton>\n//             </span>\n//           </div>\n//           <Schedule dayOffset={offset} />\n//         </Card>\n//         <Card\n//           style={{\n//             display: \"inline-block\",\n//             verticalAlign: \"top\",\n//             width: \"30vw\",\n//             height: \"30vw\",\n//             marginLeft: \"2vw\",\n//             padding: \"2%\",\n//             position: \"relative\",\n//             background: \"rgba(0,0,0,0)\",\n//             borderRadius: \"1rem!important\",\n//             boxShadow: \"none\",\n//           }}\n//         />\n//         <Card\n//           style={{\n//             display: \"inline-flex\",\n//             verticalAlign: \"top\",\n//             width: \"30vw\",\n//             height: \"30vw\",\n//             marginLeft: \"2vw\",\n//             padding: \"2%\",\n//             position: \"fixed\",\n//             right: \"5%\",\n//             borderRadius: \"0.5rem\",\n//             boxShadow: \"4px 6px 5px 4px rgba(0,0,0,0.6)\",\n//           }}\n//         >\n//           <div\n//             style={{\n//               position: \"absolute\",\n//               top: \"50%\",\n//               left: \"50%\",\n//               transform: \"translate(-50%,-50%)\",\n//             }}\n//           >\n//             <CTime />\n//             <Typography\n//               variant=\"h5\"\n//               align=\"left\"\n//               style={{\n//                 fontSize: \"2vw\",\n//               }}\n//             >\n//               {this.getTimePhrase()}\n//             </Typography>\n//           </div>\n//         </Card>\n//       </div>\n//     );\n//   }\n// }\nexport default connect()(withSnackbar(MobileSchedulePage));\n","import { useEffect, useState } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport DesktopSchedulePage from '../components/Calendar/DesktopSchedule';\nimport MobileSchedulePage from '../components/Calendar/MobileSchedule';\nimport TetLib from '../util/TetLib';\nimport useForceUpdate from '../util/useForceUpdate';\nimport t from '../util/localization/localization';\nimport { updateSchedule } from '../redux/actions/dataActions';\nimport store from '../redux/store';\nconst Schedule = (props) => {\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    let run = true;\n    window.addEventListener('resize', forceUpdate);\n    return () => {\n      window.removeEventListener('resize', forceUpdate);\n    };\n  }, []);\n  const [schedule, setSchedule] = useState(\n    JSON.parse(localStorage.cachedSchedule || 'null')\n  );\n  useEffect(() => {\n    (async () => {\n      localStorage.removeItem('cachedSchedule');\n      store.dispatch(updateSchedule());\n      while (!localStorage.cachedSchedule) await TetLib.sleep(100);\n      setSchedule(JSON.parse(localStorage.cachedSchedule));\n    })();\n  }, []);\n\n  if (!schedule) return null;\n\n  if (window.innerWidth >= 1100) {\n    return <DesktopSchedulePage schedule={schedule} />;\n  } else {\n    return <MobileSchedulePage schedule={schedule} />;\n  }\n};\nconst mapActionsToProps = {\n  updateSchedule,\n};\nexport default connect()(Schedule);\n"],"sourceRoot":""}