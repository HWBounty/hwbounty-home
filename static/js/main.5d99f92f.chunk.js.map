{"version":3,"sources":["components/SchoologyAssignment.js","components/Assignments.js","components/Schedule.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["SchoologyAssignment","props","console","log","title","href","link","due","Assignments","state","assignments","this","classes","map","a","Component","withStyles","Schedule","SearchBar","roundInput","useRoundInputBaseStyles","InputBase","placeholder","className","home","root","searchBar","Grid","container","spacing","item","xs","Card","scheduleCard","marginLeft","marginRight","width","grid","height","App","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTA0BeA,EAjBoB,SAACC,GAClC,OACE,eAAC,WAAD,WACGC,QAAQC,IAAI,SACb,6BAAKF,EAAMG,QACX,mBAAGC,KAAMJ,EAAMK,KAAf,SAAsBL,EAAMK,OAC5B,6BAAKL,EAAMM,UCJJC,EAAb,kDACE,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACXC,YAAa,CACX,CACEN,MAAO,4BACPE,KAAM,aACNC,IAAK,aAEP,CACEH,MAAO,oBACPE,KAAM,eACNC,IAAK,cAZM,EADrB,0CAmBE,WACsBI,KAAKV,MAAjBW,QACR,OACE,gCACE,cAAC,EAAD,CAAqBR,MAAM,KAAKE,KAAK,KAAKC,IAAI,OAC7CI,KAAKF,MAAMC,YAAYG,KAAI,SAACC,GACCA,EAAEV,MAAaU,EAAER,KAAWQ,EAAEP,cAzBpE,GAAiCQ,aAgClBC,MAlCA,GAkCAA,CAAmBR,GClCnBS,G,OANf,4JACE,WACE,OAAO,yDAFX,GAA8BF,cC8BxBG,EAAY,SAACjB,GACjB,IAAMkB,EAAaC,oCACnB,OACE,cAACC,EAAA,EAAD,CACET,QAASO,EACTG,YAAY,+BACZC,UAAWtB,EAAMsB,aAKVC,EAAb,4JACE,WAAU,IACAZ,EAAYD,KAAKV,MAAjBW,QACR,OACE,sBAAKW,UAAWX,EAAQa,KAAxB,UACE,0CACA,cAAC,EAAD,CAAWF,UAAWX,EAAQc,YAC9B,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAMT,UAAWX,EAAQqB,aAAzB,SACE,cAAC,EAAD,QAGJ,cAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CAAMT,UAAWX,EAAQqB,aAAzB,SACE,cAAC,EAAD,kBAfd,GAA0BlB,aAwBXC,cAnDA,CACbS,KAAM,CACJS,WAAY,GACZC,YAAa,IAEfT,UAAW,CACTU,MAAO,OAETC,KAAM,CACJC,OAAQ,QAEVL,aAAc,CACZK,OAAQ,SAuCGtB,CAAmBQ,GC9CnBe,MAZf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWC,W,OCHvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5d99f92f.chunk.js","sourcesContent":["// React\r\nimport { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// MUI\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = {};\r\n\r\nexport const SchoologyAssignment = (props) => {\r\n  return (\r\n    <Fragment>\r\n      {console.log(\"Hello\")}\r\n      <h1>{props.title}</h1>\r\n      <a href={props.link}>{props.link}</a>\r\n      <h2>{props.due}</h2>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSchoologyAssignment.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  link: PropTypes.string.isRequired,\r\n  due: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SchoologyAssignment;\r\n","// React\r\nimport React, { Component } from \"react\";\r\n\r\n// MUI\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\n// Components\r\nimport SchoologyAssignment from \"./SchoologyAssignment\";\r\n\r\nconst styles = {};\r\n\r\nexport class Assignments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      assignments: [\r\n        {\r\n          title: \"This is a test assignment\",\r\n          link: \"google.com\",\r\n          due: \"2021-3-15\",\r\n        },\r\n        {\r\n          title: \"another assigment\",\r\n          link: \"facebook.com\",\r\n          due: \"2021-4-1\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <SchoologyAssignment title=\"hi\" link=\"hi\" due=\"hi\" />\r\n        {this.state.assignments.map((a) => {\r\n          <SchoologyAssignment title={a.title} link={a.link} due={a.due} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Assignments);\r\n","// React\r\nimport React, { Component } from \"react\";\r\n\r\nexport class Schedule extends Component {\r\n  render() {\r\n    return <div>This is a schedule</div>;\r\n  }\r\n}\r\n\r\nexport default Schedule;\r\n","// React\r\nimport React, { Component } from \"react\";\r\n\r\n// MUI Stuff\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n// MUI Treasury\r\nimport { useRoundInputBaseStyles } from \"@mui-treasury/styles/inputBase/round\";\r\n\r\n// Components\r\nimport Assignments from \"../components/Assignments\";\r\nimport Calculator from \"../components/Calculator\";\r\nimport Schedule from \"../components/Schedule\";\r\n\r\nconst styles = {\r\n  root: {\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n  },\r\n  searchBar: {\r\n    width: \"20%\",\r\n  },\r\n  grid: {\r\n    height: \"100%\",\r\n  },\r\n  scheduleCard: {\r\n    height: \"100%\",\r\n  },\r\n};\r\n\r\nconst SearchBar = (props) => {\r\n  const roundInput = useRoundInputBaseStyles();\r\n  return (\r\n    <InputBase\r\n      classes={roundInput}\r\n      placeholder=\"Search on HWBounty Forums...\"\r\n      className={props.className}\r\n    />\r\n  );\r\n};\r\n\r\nexport class home extends Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.root}>\r\n        <h1>HWBounty</h1>\r\n        <SearchBar className={classes.searchBar} />\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={2}>\r\n            <Card className={classes.scheduleCard}>\r\n              <Schedule />\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Card className={classes.scheduleCard}>\r\n              <Assignments />\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(home);\r\n","// React\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// Styling\r\nimport \"./App.css\";\r\n\r\n// Pages\r\nimport Home from \"./pages/home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}