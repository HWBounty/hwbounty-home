{"version":3,"sources":["pages/scheduleBuilder.js"],"names":["useStyles","makeStyles","mainDiv","display","height","width","leftSidebar","minWidth","padding","backgroundColor","textAlign","float","mainSchedule","flexGrow","paddingTop","justifyContent","alignItems","flexDirection","title","fontFamily","fontSize","minititle","listItemText","fontWeight","classCard","minHeight","borderRadius","margin","position","classCardTitle","marginTop","marginLeft","marginRight","marginBottom","classCardTime","classCardRemoveButton","top","right","classCardRemoveButtonIcon","addButton","blockBuilderCard","flexModal","alignContent","flexWrap","mediumTitle","alignSelf","periodSelector","periodTitle","periodInput","ScheduleBuilder","props","classes","useState","period","start","end","mondaySchedule","setMondaySchedule","tuesdaySchedule","setTuesdaySchedule","wednesdaySchedule","setWednesdaySchedule","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","period1","nameOverrides","currentDay","setCurrentDay","updateDay","event","nv","createBlock","setCreateBlock","forceUpdate","useForceUpdate","cday","cdaySetter","className","t","component","aria-label","button","selected","onClick","map","x","i","startTime","moment","endTime","mins","duration","asMinutes","index","splice","open","onClose","in","id","label","variant","options","getOptionLabel","option","style","autocomplete","renderInput","params","connect","state","user","UI"],"mappings":"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","file":"static/js/24.6b34c7f4.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport {\n  Button,\n  Card,\n  IconButton,\n  List,\n  ListItem,\n  makeStyles,\n  Modal,\n  TextField,\n  Typography,\n  Zoom,\n} from \"@material-ui/core\";\nimport { AddRounded, ChevronLeftRounded, Remove } from \"@material-ui/icons\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport moment from \"moment\";\n\nimport { connect } from \"react-redux\";\n\nimport useForceUpdate from \"../util/useForceUpdate\";\nimport t from \"../util/localization/localization\";\n\nconst useStyles = makeStyles({\n  mainDiv: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n  leftSidebar: {\n    minWidth: \"10vw\",\n    // height: \"100%\",\n    padding: \"4vmin\",\n    backgroundColor: \"rgb(50,50,50)\",\n    textAlign: \"left\",\n    float: \"left\",\n  },\n  mainSchedule: {\n    backgroundColor: \"rgb(100,100,100)\",\n    flexGrow: 1,\n    paddingTop: \"5vmin\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  title: {\n    fontFamily: \"Oswald\",\n    fontSize: \"4rem\",\n  },\n  minititle: {\n    fontFamily: \"Poppins\",\n    fontSize: \"1.5rem\",\n    // textAlign: \"center\",\n  },\n  listItemText: {\n    fontFamily: \"Nunito\",\n    fontSize: \"1.25rem\",\n    fontWeight: \"bold\",\n  },\n  classCard: {\n    width: \"80%\",\n    minHeight: \"20vmin\",\n    borderRadius: \"1vmin\",\n    margin: \"1.25vmin\",\n    position: \"relative\",\n  },\n  classCardTitle: {\n    marginTop: \"5vmin\",\n    // justifySelf: \"flex-start\",\n    marginLeft: \"5vmin\",\n    marginRight: \"5vmin\",\n    marginBottom: \"1vmin\",\n    textAlign: \"left\",\n    fontSize: \"3.75rem\",\n    fontFamily: \"Oswald\",\n  },\n  classCardTime: {\n    fontFamily: \"Nunito\",\n    fontSize: \"1.5rem\",\n    textAlign: \"left\",\n    marginLeft: \"5vmin\",\n    marginRight: \"5vmin\",\n    marginBottom: \"1vmin\",\n  },\n  classCardRemoveButton: {\n    position: \"absolute\",\n    top: \"10%\",\n    right: \"5%\",\n  },\n  classCardRemoveButtonIcon: {\n    // color: \"rgb(255,0,0)\",\n  },\n  addButton: {\n    backgroundColor: \"rgb(75,75,75)\",\n  },\n\n  blockBuilderCard: {\n    minWidth: \"100vmin\",\n    minHeight: \"80vmin\",\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    padding: \"5vmin\",\n  },\n  flexModal: {\n    display: \"flex\",\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  mediumTitle: {\n    fontFamily: \"Poppins\",\n    fontSize: \"2.5rem\",\n    alignSelf: \"center\",\n    margin: \"1.25rem\",\n    marginTop: \"0\",\n  },\n  periodSelector: {\n    fontSize: \"1.75rem\",\n    height: \"500px\",\n  },\n  periodTitle: {\n    fontSize: 50,\n    fontFamily: \"Oswald\",\n  },\n  periodInput: {\n    fontSize: 50,\n  },\n});\nexport const ScheduleBuilder = (props) => {\n  const classes = useStyles(props);\n  const [mondaySchedule, setMondaySchedule] = useState([\n    {\n      period: \"period1\",\n      start: \"11:30am\",\n      end: \"12:30pm\",\n    },\n  ]);\n  const [tuesdaySchedule, setTuesdaySchedule] = useState([]);\n  const [wednesdaySchedule, setWednesdaySchedule] = useState([]);\n  const [thursday, setThursday] = useState([]);\n  const [friday, setFriday] = useState([]);\n  const [saturday, setSaturday] = useState([]);\n  const [sunday, setSunday] = useState([]);\n  const [nameOverrides, setNameOverrides] = useState({\n    period1: \"Period 1\",\n  });\n\n  const [currentDay, setCurrentDay] = useState(0);\n  const updateDay = (event, nv) => {\n    setCurrentDay(nv);\n  };\n  const [createBlock, setCreateBlock] = useState(false);\n  const forceUpdate = useForceUpdate();\n  // let obj =    {\n  //     period: \"period1\",\n  //     start: \"11:30am\",\n  //     end: \"12:30pm\",\n  // }\n  const periods = [\n    \"period1\",\n    \"period2\",\n    \"period3\",\n    \"period4\",\n    \"period5\",\n    \"period6\",\n    \"period7\",\n    \"period8\",\n    \"period9\",\n    \"period10\",\n    \"period11\",\n    \"period12\",\n    \"period13\",\n    \"period14\",\n    \"period15\",\n    \"break\",\n  ];\n  const cday = [\n    mondaySchedule,\n    tuesdaySchedule,\n    wednesdaySchedule,\n    thursday,\n    friday,\n    saturday,\n    sunday,\n  ][currentDay];\n  const cdaySetter = [\n    setMondaySchedule,\n    setTuesdaySchedule,\n    setWednesdaySchedule,\n    setThursday,\n    setFriday,\n    setSaturday,\n    setSunday,\n  ][currentDay];\n  const removeBlock = (index) => {\n    cday.splice(index, 1);\n    // console.log(cday);\n    cdaySetter(cday);\n    forceUpdate();\n  };\n  const addButtonClicked = () => {\n    setCreateBlock(true);\n  };\n  const handleCreateBlockClose = () => {\n    setCreateBlock(false);\n  };\n  const renderDays = () => {\n    return cday.map((x, i) => {\n      let startTime = moment(x.start, \"hh:mma\");\n      let endTime = moment(x.end, \"hh:mma\");\n      return (\n        <Card className={`${classes.classCard}`}>\n          <Typography className={`${classes.classCardTitle}`}>\n            {nameOverrides[x.period] || x.period}\n          </Typography>\n          <Typography className={`${classes.classCardTime}`}>\n            {t(\"scheduleBuilder.formatMinutes\", {\n              start: x.start,\n              end: x.end,\n              mins: moment.duration(endTime - startTime).asMinutes(),\n            })}\n          </Typography>\n          <IconButton\n            className={`${classes.classCardRemoveButton}`}\n            onClick={() => removeBlock(i)}\n          >\n            <Remove className={`${classes.classCardRemoveButtonIcon}`} />\n          </IconButton>\n        </Card>\n      );\n    });\n  };\n  return (\n    <div className={`${classes.mainDiv}`}>\n      <div className={`${classes.leftSidebar}`}>\n        <Typography className={`${classes.title}`}>\n          {t(\"scheduleBuilder.scheduleBuilder\")}\n        </Typography>\n        <Button>\n          <ChevronLeftRounded /> {t(\"scheduleBuilder.backToSearch\")}\n        </Button>\n        <Typography className={`${classes.minititle}`}>\n          {t(\"scheduleBuilder.makeSchedule\")}\n        </Typography>\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n          <ListItem\n            button\n            selected={currentDay === 0}\n            onClick={(event) => updateDay(event, 0)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.monday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 1}\n            onClick={(event) => updateDay(event, 1)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.tuesday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 2}\n            onClick={(event) => updateDay(event, 2)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.wednesday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 3}\n            onClick={(event) => updateDay(event, 3)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.thursday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 4}\n            onClick={(event) => updateDay(event, 4)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.friday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 5}\n            onClick={(event) => updateDay(event, 5)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.saturday\")}\n          </ListItem>\n          <ListItem\n            button\n            selected={currentDay === 6}\n            onClick={(event) => updateDay(event, 6)}\n            className={`${classes.listItemText}`}\n          >\n            {t(\"days.sunday\")}\n            {/* <ListItemText primary=\"Sunday\" className={`${classes.listItemText}`}/> */}\n          </ListItem>\n        </List>\n      </div>\n      <div className={`${classes.mainSchedule}`}>\n        {renderDays()}\n        <IconButton\n          className={`${classes.addButton}`}\n          onClick={addButtonClicked}\n        >\n          <AddRounded />\n        </IconButton>\n      </div>\n      <Modal\n        open={createBlock}\n        onClose={handleCreateBlockClose}\n        className={`${classes.flexModal}`}\n      >\n        <Zoom in={createBlock}>\n          <Card className={`${classes.blockBuilderCard}`}>\n            <Typography className={`${classes.mediumTitle}`}>\n              {t(\"scheduleBuilder.createSchedule\")}\n            </Typography>\n\n            <div>\n              <Typography className={`${classes.periodTitle}`}>\n                {t(\"scheduleBuilder.classStartTime\")}\n              </Typography>\n              <TextField\n                id=\"filled-basic\"\n                label=\"Start Time\"\n                variant=\"filled\"\n              />\n              {/* <TextField label={ }></TextField> */}\n            </div>\n            <Autocomplete\n              options={periods}\n              getOptionLabel={(option) => nameOverrides[option] || option}\n              style={{ width: 300 }}\n              autocomplete\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Period Name\"\n                  variant=\"outlined\"\n                  className={`${classes.periodSelector}`}\n                />\n              )}\n            />\n          </Card>\n        </Zoom>\n      </Modal>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  UI: state.UI,\n});\nexport default connect(mapStateToProps)(ScheduleBuilder);\n"],"sourceRoot":""}