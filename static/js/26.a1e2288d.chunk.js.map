{"version":3,"sources":["pages/setSchedule.js"],"names":["SetSchedule","props","state","scheduleData","fetching","tab","a","console","log","this","Promise","all","axios","get","location","pathname","split","pop","catch","er","trace","res","selfData","courses","data","nameOverrides","JSON","parse","schedule","assign","self","section","setState","periods","Set","forEach","x","y","add","period","Array","from","keys","setting","periodChoices","sch","post","scheduleID","classes","status","href","parseAllPeriods","options","map","id","name","course_title","concat","style","width","minWidth","margin","required","labelId","value","onChange","event","obj","target","handleChange","React","Children","toArray","option","display","paddingBottom","paddingLeft","paddingRight","textAlign","verticalAlign","variant","height","marginRight","t","src","user","pfp","align","publicID","marginLeft","moment","parseInt","lastUpdated","fromNow","description","handleDropdowns","paddingTop","borderTop","onClick","ev","handleSet","fetchScheduleData","Component","connect","withRouter"],"mappings":"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","file":"static/js/26.a1e2288d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  Container,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\n\nimport axios from \"axios\";\n\nimport { connect } from \"react-redux\";\n\nimport moment from \"moment\";\n\nimport ReactMarkdown from \"react-markdown\";\n\nimport { withRouter } from \"react-router\";\n\nimport t from \"../util/localization/localization\";\n\nclass SetSchedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scheduleData: null,\n      fetching: false,\n      tab: 0,\n    };\n  }\n  async fetchScheduleData() {\n    console.log(\"FETCHING\");\n    if (this.state.scheduleData) return console.log(this.state.scheduleData);\n    try {\n      let [res, selfData, courses] = await Promise.all([\n        axios\n          .get(\n            `https://api.hwbounty.help/schedules/view/${this.props.location.pathname\n              .split(\"/\")\n              .pop()}`\n          )\n          .catch((er) => console.log),\n        axios.get(`https://api.hwbounty.help/@me`).catch(console.trace),\n        axios(`https://api.hwbounty.help/sgy/getCourses`).catch(console.trace),\n      ]);\n      if (res.data) {\n        res.data.nameOverrides = JSON.parse(res.data.nameOverrides);\n        res.data.schedule = JSON.parse(res.data.schedule);\n        let assign = {\n          scheduleData: res.data,\n        };\n        if (selfData.data) assign.self = selfData.data;\n        if (courses.data) assign.courses = courses.data.section;\n        this.setState(assign);\n      }\n    } catch (error) {\n      console.trace(error);\n      this.setState({});\n    }\n  }\n  componentDidMount(props) {\n    this.props = props;\n  }\n  parseAllPeriods(schedule) {\n    let periods = new Set();\n    [\n      \"monday\",\n      \"tuesday\",\n      \"wednesday\",\n      \"thursday\",\n      \"friday\",\n      \"saturday\",\n      \"sunday\",\n    ].forEach((x) => {\n      schedule[x].forEach((y) => {\n        periods.add(y.period);\n      });\n    });\n    return Array.from(periods.keys());\n  }\n  async handleSet(self) {\n    if (self.state.setting) return;\n    self.setState({ setting: true });\n    let periodChoices = self.state.periodChoices;\n    let sch = this.props.location.pathname.split(\"/\").pop();\n    console.log(sch);\n    let res = await axios\n      .post(`https://api.hwbounty.help/schedules/set`, {\n        scheduleID: sch,\n        classes: periodChoices,\n      })\n      .catch(console.trace);\n    if (res.status === 200) {\n      location.href = \"https://hwbounty.help\";\n    } else {\n      self.setState({ setting: false });\n    }\n  }\n  handleDropdowns(self) {\n    let courses = self.state.courses;\n    let periods = this.parseAllPeriods(self.state.scheduleData.schedule);\n    let options = courses\n      .map((x) => {\n        return { id: x.id, name: x.course_title };\n      })\n      .concat({ id: \"None\", name: \"None\" });\n    let nameOverrides = self.state.scheduleData.nameOverrides;\n    console.log(periods);\n    const handleChange = (event, data) => {\n      let obj = self.state.periodChoices || {};\n      obj[data] = event.target;\n      self.setState({ periodChoices: obj });\n    };\n    return periods.map((x) => {\n      return (\n        <FormControl\n          style={{\n            width: \"30%\",\n            minWidth: \"30%\",\n            margin: \"1.5%\",\n          }}\n          required\n        >\n          <InputLabel id={`inputLabel${x}`}>{nameOverrides[x] || x}</InputLabel>\n          <Select\n            labelId={`select${x}Label`}\n            id={`select${x}`}\n            value={self.state.periodChoices && self.state.periodChoices[`${x}`]}\n            onChange={(event) => {\n              handleChange(event, `${x}`);\n            }}\n          >\n            {React.Children.toArray(\n              options.map((option) => {\n                return <MenuItem value={option.id}>{option.name}</MenuItem>;\n              })\n            )}\n          </Select>\n        </FormControl>\n      );\n    });\n\n    // self.state\n  }\n  render() {\n    if (!this.state.scheduleData && !this.state.fetching) {\n      console.log(\"GoFetch\");\n      this.setState({ fetching: true });\n      this.fetchScheduleData();\n      return <br />;\n    }\n    //Infinite Loop setstate somewhere; Figure out what\n    if (this.state.scheduleData) {\n      // this.setState({ fetching: false })\n      return (\n        <Container>\n          <Card\n            style={{\n              display: \"inline-block\",\n              width: \"90%\",\n              margin: \"5%\",\n              paddingBottom: \"1vh\",\n              paddingLeft: \"5%\",\n              paddingRight: \"5%\",\n              textAlign: \"left\",\n              verticalAlign: \"middle\",\n            }}\n          >\n            {/* <Typography variant=\"h4\">Stats</Typography> */}\n            <Typography\n              variant=\"h4\"\n              style={{\n                textAlign: \"center\",\n              }}\n            >\n              {this.state.scheduleData.name}\n            </Typography>\n            <Container\n              style={{\n                width: \"100%\",\n                height: \"10%\",\n              }}\n            >\n              <span>\n                <Typography\n                  variant=\"caption\"\n                  style={{\n                    textAlign: \"left\",\n                    marginRight: \"1%\",\n                  }}\n                >\n                  {t(\"setSchedule.by\")}\n                </Typography>\n                <Avatar\n                  src={this.state.scheduleData.user.pfp}\n                  align=\"left\"\n                  style={{\n                    display: \"inline-block\",\n                    verticalAlign: \"middle\",\n                  }}\n                >\n                  {this.state.scheduleData.user.publicID}\n                </Avatar>\n                <Typography\n                  variant=\"h5\"\n                  style={{\n                    verticalAlign: \"middle\",\n                    marginLeft: \"1%\",\n                    display: \"inline-block\",\n                    // fontSize: \"47px\",\n                    // height: \"40px\",\n                  }}\n                >\n                  {this.state.scheduleData.user.publicID}\n                </Typography>\n              </span>\n            </Container>\n            <Typography>\n              {t(\"setSchedule.lastUpdated\")}{\" \"}\n              {moment(parseInt(this.state.scheduleData.lastUpdated)).fromNow()}\n            </Typography>\n            <ReactMarkdown>{this.state.scheduleData.description}</ReactMarkdown>\n            <Container\n              style={{\n                width: \"100%\",\n              }}\n            >\n              {React.Children.toArray(this.handleDropdowns(this))}\n            </Container>\n            <Container\n              style={{\n                paddingTop: \"1vh\",\n                borderTop: \"2px solid rgba(160, 160, 160, 0.2)\",\n                textAlign: \"center\",\n              }}\n            >\n              <Button onClick={(ev) => this.handleSet(this)}>\n                {t(\"setSchedule.setClasses\")}\n              </Button>\n            </Container>\n          </Card>\n        </Container>\n      );\n    }\n    return null;\n  }\n}\nconst DisplayedScheduleDay = (props) => {\n  const classes = props.classes;\n  const data = props.data;\n  const day = props.day;\n  let overrides = data.nameOverrides;\n  let dayschedule = data.schedule[\n    [\n      \"monday\",\n      \"tuesday\",\n      \"wednesday\",\n      \"thursday\",\n      \"friday\",\n      \"saturday\",\n      \"sunday\",\n    ][day]\n  ].map((x) => {\n    return Object.assign(x, {\n      period: data.nameOverrides[x.period] || x.period,\n    });\n  });\n  console.log(dayschedule);\n  const renderPeriods = () => {\n    let children = React.Children.toArray(\n      dayschedule.map((x) => {\n        return (\n          <Container>\n            <Typography variant=\"h4\">{x.period}</Typography>\n            <Typography variant=\"h6\">{x.timeStart}</Typography>\n            <Typography variant=\"h6\">{x.timeEnd}</Typography>\n          </Container>\n        );\n      })\n    );\n    if (!children.length)\n      return <Typography variant=\"h3\">{t(\"setSchedule.noSchool\")}</Typography>;\n    return children;\n  };\n  return (\n    <Container\n      style={{\n        marginBottom: \"5%\",\n      }}\n    >\n      {renderPeriods()}\n    </Container>\n  );\n};\nexport default connect()(withRouter(SetSchedule));\n"],"sourceRoot":""}