{"version":3,"sources":["pages/scheduleBuilder.js"],"names":["useStyles","makeStyles","mainDiv","display","height","width","leftSidebar","minWidth","padding","backgroundColor","textAlign","float","mainSchedule","flexGrow","paddingTop","justifyContent","alignItems","flexDirection","title","fontFamily","fontSize","minititle","listItemText","fontWeight","classCard","minHeight","borderRadius","margin","position","classCardTitle","marginTop","marginLeft","marginRight","marginBottom","classCardTime","classCardRemoveButton","top","right","classCardRemoveButtonIcon","addButton","blockBuilderCard","flexModal","alignContent","flexWrap","mediumTitle","alignSelf","periodSelector","periodTitle","periodInput","ScheduleBuilder","props","classes","useState","period","start","end","mondaySchedule","setMondaySchedule","tuesdaySchedule","setTuesdaySchedule","wednesdaySchedule","setWednesdaySchedule","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","period1","nameOverrides","currentDay","setCurrentDay","updateDay","event","nv","createBlock","setCreateBlock","forceUpdate","useForceUpdate","cday","cdaySetter","className","component","aria-label","button","selected","onClick","map","x","i","startTime","moment","endTime","console","log","unix","duration","asMinutes","index","splice","open","onClose","in","id","label","variant","options","getOptionLabel","option","style","autocomplete","renderInput","params","connect","state","user","UI"],"mappings":"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","file":"static/js/22.bf8dfcfa.chunk.js","sourcesContent":["import { Button, Card, IconButton, InputBase, List, ListItem, ListItemText, makeStyles, Modal, Select, TextField, Typography, Zoom } from \"@material-ui/core\";\r\nimport { AddRounded, ChevronLeft, ChevronLeftRounded, CloseRounded, Remove } from \"@material-ui/icons\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport moment from \"moment\";\r\nimport { useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport useForceUpdate from \"../util/useForceUpdate\";\r\nconst useStyles = makeStyles({\r\n    mainDiv: {\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n    leftSidebar: {\r\n        minWidth: \"10vw\",\r\n        // height: \"100%\",\r\n        padding: \"4vmin\",\r\n        backgroundColor: \"rgb(50,50,50)\",\r\n        textAlign: \"left\",\r\n        float: \"left\",\r\n    },\r\n    mainSchedule: {\r\n        backgroundColor: \"rgb(100,100,100)\",\r\n        flexGrow: 1,\r\n        paddingTop: \"5vmin\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        fontFamily: \"Oswald\",\r\n        fontSize: \"4rem\",\r\n    },\r\n    minititle: {\r\n        fontFamily: \"Poppins\",\r\n        fontSize: \"1.5rem\",\r\n        // textAlign: \"center\",\r\n    },\r\n    listItemText: {\r\n        fontFamily: \"Nunito\",\r\n        fontSize: \"1.25rem\",\r\n        fontWeight: \"bold\"\r\n    },\r\n    classCard: {\r\n        width: \"80%\",\r\n        minHeight: \"20vmin\",\r\n        borderRadius: \"1vmin\",\r\n        margin: \"1.25vmin\",\r\n        position: \"relative\",\r\n    },\r\n    classCardTitle: {\r\n        marginTop: \"5vmin\",\r\n        // justifySelf: \"flex-start\",\r\n        marginLeft: \"5vmin\",\r\n        marginRight: \"5vmin\",\r\n        marginBottom: \"1vmin\",\r\n        textAlign: \"left\",\r\n        fontSize: \"3.75rem\",\r\n        fontFamily: \"Oswald\",\r\n    },\r\n    classCardTime: {\r\n        fontFamily: \"Nunito\",\r\n        fontSize: \"1.5rem\",\r\n        textAlign: \"left\",\r\n        marginLeft: \"5vmin\",\r\n        marginRight: \"5vmin\",\r\n        marginBottom: \"1vmin\",\r\n    },\r\n    classCardRemoveButton: {\r\n        position: \"absolute\",\r\n        top: \"10%\",\r\n        right: \"5%\"\r\n    },\r\n    classCardRemoveButtonIcon: {\r\n        // color: \"rgb(255,0,0)\",\r\n    },\r\n    addButton: {\r\n        backgroundColor: \"rgb(75,75,75)\",\r\n    },\r\n\r\n\r\n\r\n    blockBuilderCard: {\r\n        minWidth: \"100vmin\",\r\n        minHeight: \"80vmin\",\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"flex-start\",\r\n        padding: \"5vmin\"\r\n    },\r\n    flexModal: {\r\n        display: \"flex\",\r\n        alignContent: \"center\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexWrap: \"nowrap\",\r\n    },\r\n    mediumTitle: {\r\n        fontFamily: \"Poppins\",\r\n        fontSize: \"2.5rem\",\r\n        alignSelf: \"center\",\r\n        margin: \"1.25rem\",\r\n        marginTop: \"0\",\r\n    },\r\n    periodSelector: {\r\n        fontSize: \"1.75rem\",\r\n        height: \"500px\"\r\n    },\r\n    periodTitle: {\r\n        fontSize: 50,\r\n        fontFamily: \"Oswald\",\r\n    },\r\n    periodInput: {\r\n        fontSize: 50\r\n    }\r\n});\r\nexport const ScheduleBuilder = (props) => {\r\n    const classes = useStyles(props);\r\n    const [mondaySchedule, setMondaySchedule] = useState([\r\n        {\r\n            period: \"period1\",\r\n            start: \"11:30am\",\r\n            end: \"12:30pm\",\r\n        }\r\n    ]);\r\n    const [tuesdaySchedule, setTuesdaySchedule] = useState([]);\r\n    const [wednesdaySchedule, setWednesdaySchedule] = useState([]);\r\n    const [thursday, setThursday] = useState([]);\r\n    const [friday, setFriday] = useState([]);\r\n    const [saturday, setSaturday] = useState([]);\r\n    const [sunday, setSunday] = useState([]);\r\n    const [nameOverrides, setNameOverrides] = useState(\r\n        {\r\n            period1: \"Period 1\",\r\n        }\r\n    );\r\n\r\n    const [currentDay, setCurrentDay] = useState(0);\r\n    const updateDay = (event, nv) => {\r\n        setCurrentDay(nv);\r\n    }\r\n    const [createBlock, setCreateBlock] = useState(false);\r\n    const forceUpdate = useForceUpdate();\r\n    // let obj =    {\r\n    //     period: \"period1\",\r\n    //     start: \"11:30am\",\r\n    //     end: \"12:30pm\",\r\n    // }\r\n    const periods = [\"period1\", \"period2\", \"period3\", \"period4\", \"period5\", \"period6\", \"period7\", \"period8\", \"period9\", \"period10\", \"period11\", \"period12\", \"period13\", \"period14\", \"period15\", \"break\"];\r\n    const cday = [mondaySchedule, tuesdaySchedule, wednesdaySchedule, thursday, friday, saturday, sunday][currentDay];\r\n    const cdaySetter = [setMondaySchedule, setTuesdaySchedule, setWednesdaySchedule, setThursday, setFriday, setSaturday, setSunday][currentDay];\r\n    const removeBlock = (index) => {\r\n        cday.splice(index, 1);\r\n        // console.log(cday);\r\n        cdaySetter(cday);\r\n        forceUpdate();\r\n    }\r\n    const addButtonClicked = () => {\r\n        setCreateBlock(true);\r\n    }\r\n    const handleCreateBlockClose = () => {\r\n        setCreateBlock(false);\r\n    }\r\n    const renderDays = () => {\r\n        return cday.map((x, i) => {\r\n            let startTime = moment(x.start, \"hh:mma\")\r\n            let endTime = moment(x.end, \"hh:mma\")\r\n            console.log(startTime.unix(), endTime.unix());\r\n            return (\r\n                <Card className={`${classes.classCard}`}>\r\n                    <Typography className={`${classes.classCardTitle}`}>\r\n                        {nameOverrides[x.period] || x.period}\r\n                    </Typography>\r\n                    <Typography className={`${classes.classCardTime}`}>\r\n                        {x.start} - {x.end} ({moment.duration(endTime - startTime).asMinutes()} mins)\r\n                    </Typography>\r\n                    <IconButton className={`${classes.classCardRemoveButton}`} onClick={() => removeBlock(i)}>\r\n                        <Remove className={`${classes.classCardRemoveButtonIcon}`} />\r\n                    </IconButton>\r\n                </Card>\r\n            );\r\n        });\r\n    }\r\n    return (\r\n        <div className={`${classes.mainDiv}`}>\r\n            <div className={`${classes.leftSidebar}`}>\r\n                <Typography className={`${classes.title}`}>\r\n                    Schedule Builder\r\n                </Typography>\r\n                <Button>\r\n                    <ChevronLeftRounded /> Back to search\r\n                </Button>\r\n                <Typography className={`${classes.minititle}`}>\r\n                    Make your own schedule\r\n                </Typography>\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 0}\r\n                        onClick={(event) => updateDay(event, 0)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Monday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 1}\r\n                        onClick={(event) => updateDay(event, 1)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Tuesday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 2}\r\n                        onClick={(event) => updateDay(event, 2)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Wednesday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 3}\r\n                        onClick={(event) => updateDay(event, 3)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Thursday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 4}\r\n                        onClick={(event) => updateDay(event, 4)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Friday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 5}\r\n                        onClick={(event) => updateDay(event, 5)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Saturday\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        selected={currentDay === 6}\r\n                        onClick={(event) => updateDay(event, 6)}\r\n                        className={`${classes.listItemText}`}\r\n                    >\r\n                        Sunday\r\n                        {/* <ListItemText primary=\"Sunday\" className={`${classes.listItemText}`}/> */}\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n            <div className={`${classes.mainSchedule}`}>\r\n                {renderDays()}\r\n                <IconButton className={`${classes.addButton}`} onClick={addButtonClicked}>\r\n                    <AddRounded />\r\n                </IconButton>\r\n\r\n            </div>\r\n            <Modal\r\n                open={createBlock}\r\n                onClose={handleCreateBlockClose}\r\n                className={`${classes.flexModal}`}\r\n            >\r\n                <Zoom\r\n                    in={createBlock}\r\n                >\r\n                    <Card className={`${classes.blockBuilderCard}`}>\r\n                        <Typography className={`${classes.mediumTitle}`}>\r\n                            Create a schedule block\r\n                        </Typography>\r\n\r\n                        <div>\r\n                            <Typography className={`${classes.periodTitle}`}>\r\n                                Class Start Time\r\n                        </Typography>\r\n                        <TextField id=\"filled-basic\" label=\"Start Time\" variant=\"filled\" />\r\n                            {/* <TextField label={ }></TextField> */}\r\n                        </div>\r\n                        <Autocomplete\r\n                            options={periods}\r\n                            getOptionLabel={(option) => nameOverrides[option] || option}\r\n                            style={{ width: 300 }}\r\n                            autocomplete\r\n                            renderInput={(params) => <TextField {...params} label=\"Period Name\" variant=\"outlined\" className={`${classes.periodSelector}`} />}\r\n                        />\r\n                    </Card>\r\n                </Zoom>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n    UI: state.UI,\r\n});\r\nexport default connect(mapStateToProps)(ScheduleBuilder);"],"sourceRoot":""}