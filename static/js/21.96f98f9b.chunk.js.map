{"version":3,"sources":["pages/scheduleBuilder.js"],"names":["useStyles","makeStyles","mainDiv","display","height","width","leftSidebar","minWidth","padding","backgroundColor","textAlign","float","mainSchedule","flexGrow","paddingTop","justifyContent","alignItems","flexDirection","title","fontFamily","fontSize","minititle","listItemText","fontWeight","classCard","minHeight","borderRadius","margin","position","classCardTitle","marginTop","marginLeft","marginRight","marginBottom","classCardTime","classCardRemoveButton","top","right","classCardRemoveButtonIcon","addButton","blockBuilderCard","flexModal","alignContent","flexWrap","mediumTitle","alignSelf","periodSelector","periodTitle","periodInput","ScheduleBuilder","props","classes","useState","period","start","end","mondaySchedule","setMondaySchedule","tuesdaySchedule","setTuesdaySchedule","wednesdaySchedule","setWednesdaySchedule","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","period1","nameOverrides","currentDay","setCurrentDay","updateDay","event","nv","createBlock","setCreateBlock","forceUpdate","useForceUpdate","cday","cdaySetter","className","component","aria-label","button","selected","onClick","map","x","i","startTime","moment","endTime","console","log","unix","duration","asMinutes","index","splice","open","onClose","in","id","label","variant","options","getOptionLabel","option","style","autocomplete","renderInput","params","connect","state","user","UI"],"mappings":"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","file":"static/js/21.96f98f9b.chunk.js","sourcesContent":["import { Button, Card, IconButton, InputBase, List, ListItem, ListItemText, makeStyles, Modal, Select, TextField, Typography, Zoom } from \"@material-ui/core\";\nimport { AddRounded, ChevronLeft, ChevronLeftRounded, CloseRounded, Remove } from \"@material-ui/icons\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport moment from \"moment\";\nimport { useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { connect } from \"react-redux\";\nimport useForceUpdate from \"../util/useForceUpdate\";\nconst useStyles = makeStyles({\n    mainDiv: {\n        display: \"flex\",\n        height: \"100%\",\n        width: \"100%\",\n    },\n    leftSidebar: {\n        minWidth: \"10vw\",\n        // height: \"100%\",\n        padding: \"4vmin\",\n        backgroundColor: \"rgb(50,50,50)\",\n        textAlign: \"left\",\n        float: \"left\",\n    },\n    mainSchedule: {\n        backgroundColor: \"rgb(100,100,100)\",\n        flexGrow: 1,\n        paddingTop: \"5vmin\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n    },\n    title: {\n        fontFamily: \"Oswald\",\n        fontSize: \"4rem\",\n    },\n    minititle: {\n        fontFamily: \"Poppins\",\n        fontSize: \"1.5rem\",\n        // textAlign: \"center\",\n    },\n    listItemText: {\n        fontFamily: \"Nunito\",\n        fontSize: \"1.25rem\",\n        fontWeight: \"bold\"\n    },\n    classCard: {\n        width: \"80%\",\n        minHeight: \"20vmin\",\n        borderRadius: \"1vmin\",\n        margin: \"1.25vmin\",\n        position: \"relative\",\n    },\n    classCardTitle: {\n        marginTop: \"5vmin\",\n        // justifySelf: \"flex-start\",\n        marginLeft: \"5vmin\",\n        marginRight: \"5vmin\",\n        marginBottom: \"1vmin\",\n        textAlign: \"left\",\n        fontSize: \"3.75rem\",\n        fontFamily: \"Oswald\",\n    },\n    classCardTime: {\n        fontFamily: \"Nunito\",\n        fontSize: \"1.5rem\",\n        textAlign: \"left\",\n        marginLeft: \"5vmin\",\n        marginRight: \"5vmin\",\n        marginBottom: \"1vmin\",\n    },\n    classCardRemoveButton: {\n        position: \"absolute\",\n        top: \"10%\",\n        right: \"5%\"\n    },\n    classCardRemoveButtonIcon: {\n        // color: \"rgb(255,0,0)\",\n    },\n    addButton: {\n        backgroundColor: \"rgb(75,75,75)\",\n    },\n\n\n\n    blockBuilderCard: {\n        minWidth: \"100vmin\",\n        minHeight: \"80vmin\",\n        display: \"flex\",\n        alignItems: \"flex-start\",\n        flexDirection: \"column\",\n        justifyContent: \"flex-start\",\n        padding: \"5vmin\"\n    },\n    flexModal: {\n        display: \"flex\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexWrap: \"nowrap\",\n    },\n    mediumTitle: {\n        fontFamily: \"Poppins\",\n        fontSize: \"2.5rem\",\n        alignSelf: \"center\",\n        margin: \"1.25rem\",\n        marginTop: \"0\",\n    },\n    periodSelector: {\n        fontSize: \"1.75rem\",\n        height: \"500px\"\n    },\n    periodTitle: {\n        fontSize: 50,\n        fontFamily: \"Oswald\",\n    },\n    periodInput: {\n        fontSize: 50\n    }\n});\nexport const ScheduleBuilder = (props) => {\n    const classes = useStyles(props);\n    const [mondaySchedule, setMondaySchedule] = useState([\n        {\n            period: \"period1\",\n            start: \"11:30am\",\n            end: \"12:30pm\",\n        }\n    ]);\n    const [tuesdaySchedule, setTuesdaySchedule] = useState([]);\n    const [wednesdaySchedule, setWednesdaySchedule] = useState([]);\n    const [thursday, setThursday] = useState([]);\n    const [friday, setFriday] = useState([]);\n    const [saturday, setSaturday] = useState([]);\n    const [sunday, setSunday] = useState([]);\n    const [nameOverrides, setNameOverrides] = useState(\n        {\n            period1: \"Period 1\",\n        }\n    );\n\n    const [currentDay, setCurrentDay] = useState(0);\n    const updateDay = (event, nv) => {\n        setCurrentDay(nv);\n    }\n    const [createBlock, setCreateBlock] = useState(false);\n    const forceUpdate = useForceUpdate();\n    // let obj =    {\n    //     period: \"period1\",\n    //     start: \"11:30am\",\n    //     end: \"12:30pm\",\n    // }\n    const periods = [\"period1\", \"period2\", \"period3\", \"period4\", \"period5\", \"period6\", \"period7\", \"period8\", \"period9\", \"period10\", \"period11\", \"period12\", \"period13\", \"period14\", \"period15\", \"break\"];\n    const cday = [mondaySchedule, tuesdaySchedule, wednesdaySchedule, thursday, friday, saturday, sunday][currentDay];\n    const cdaySetter = [setMondaySchedule, setTuesdaySchedule, setWednesdaySchedule, setThursday, setFriday, setSaturday, setSunday][currentDay];\n    const removeBlock = (index) => {\n        cday.splice(index, 1);\n        // console.log(cday);\n        cdaySetter(cday);\n        forceUpdate();\n    }\n    const addButtonClicked = () => {\n        setCreateBlock(true);\n    }\n    const handleCreateBlockClose = () => {\n        setCreateBlock(false);\n    }\n    const renderDays = () => {\n        return cday.map((x, i) => {\n            let startTime = moment(x.start, \"hh:mma\")\n            let endTime = moment(x.end, \"hh:mma\")\n            console.log(startTime.unix(), endTime.unix());\n            return (\n                <Card className={`${classes.classCard}`}>\n                    <Typography className={`${classes.classCardTitle}`}>\n                        {nameOverrides[x.period] || x.period}\n                    </Typography>\n                    <Typography className={`${classes.classCardTime}`}>\n                        {x.start} - {x.end} ({moment.duration(endTime - startTime).asMinutes()} mins)\n                    </Typography>\n                    <IconButton className={`${classes.classCardRemoveButton}`} onClick={() => removeBlock(i)}>\n                        <Remove className={`${classes.classCardRemoveButtonIcon}`} />\n                    </IconButton>\n                </Card>\n            );\n        });\n    }\n    return (\n        <div className={`${classes.mainDiv}`}>\n            <div className={`${classes.leftSidebar}`}>\n                <Typography className={`${classes.title}`}>\n                    Schedule Builder\n                </Typography>\n                <Button>\n                    <ChevronLeftRounded /> Back to search\n                </Button>\n                <Typography className={`${classes.minititle}`}>\n                    Make your own schedule\n                </Typography>\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n\n                    <ListItem\n                        button\n                        selected={currentDay === 0}\n                        onClick={(event) => updateDay(event, 0)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Monday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 1}\n                        onClick={(event) => updateDay(event, 1)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Tuesday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 2}\n                        onClick={(event) => updateDay(event, 2)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Wednesday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 3}\n                        onClick={(event) => updateDay(event, 3)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Thursday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 4}\n                        onClick={(event) => updateDay(event, 4)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Friday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 5}\n                        onClick={(event) => updateDay(event, 5)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Saturday\n                    </ListItem>\n                    <ListItem\n                        button\n                        selected={currentDay === 6}\n                        onClick={(event) => updateDay(event, 6)}\n                        className={`${classes.listItemText}`}\n                    >\n                        Sunday\n                        {/* <ListItemText primary=\"Sunday\" className={`${classes.listItemText}`}/> */}\n                    </ListItem>\n                </List>\n            </div>\n            <div className={`${classes.mainSchedule}`}>\n                {renderDays()}\n                <IconButton className={`${classes.addButton}`} onClick={addButtonClicked}>\n                    <AddRounded />\n                </IconButton>\n\n            </div>\n            <Modal\n                open={createBlock}\n                onClose={handleCreateBlockClose}\n                className={`${classes.flexModal}`}\n            >\n                <Zoom\n                    in={createBlock}\n                >\n                    <Card className={`${classes.blockBuilderCard}`}>\n                        <Typography className={`${classes.mediumTitle}`}>\n                            Create a schedule block\n                        </Typography>\n\n                        <div>\n                            <Typography className={`${classes.periodTitle}`}>\n                                Class Start Time\n                        </Typography>\n                        <TextField id=\"filled-basic\" label=\"Start Time\" variant=\"filled\" />\n                            {/* <TextField label={ }></TextField> */}\n                        </div>\n                        <Autocomplete\n                            options={periods}\n                            getOptionLabel={(option) => nameOverrides[option] || option}\n                            style={{ width: 300 }}\n                            autocomplete\n                            renderInput={(params) => <TextField {...params} label=\"Period Name\" variant=\"outlined\" className={`${classes.periodSelector}`} />}\n                        />\n                    </Card>\n                </Zoom>\n            </Modal>\n        </div>\n    )\n}\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    UI: state.UI,\n});\nexport default connect(mapStateToProps)(ScheduleBuilder);"],"sourceRoot":""}