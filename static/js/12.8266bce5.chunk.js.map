{"version":3,"sources":["util/latex/preprocessMathQuill.js","components/Modules/Calculator/CalcTools.js","components/Modules/Calculator/Calculator.js","components/Modules/Calculator/CalculatorModule.js","pages/modules.js"],"names":["mathquillToMathJS","fromMQ","noBraceSub","convertSubscript","fracToDivision","tex","mathjs","reduce","acc","r","str","find","replaceWith","replace","RegExp","escapeRegExp","expr","subStart","indexOf","numStart","length","closingBrace","slice","frac","fracStart","divIdx","startIdx","braces","openingBrace","undefined","Error","stack","j","findClosingBrace","useStyles","makeStyles","numPadRoot","symbolPadRoot","button","SymbolButton","onClick","latex","symbol","classes","Button","className","variant","NumPad","props","NumRow","arr","Grid","container","item","spacing","wrap","React","Children","toArray","map","num","disabled","direction","SymbolPad","obj","addStyles","parser","math","number","precision","LatexInput","onChange","onSubmit","mathquillDidMount","style","height","fontSize","flex","config","autoCommands","autoOperatorNames","handlers","enter","withStyles","theme","spreadIt","symbolPadGrid","paddingTop","useState","expression","setExpression","answer","setAnswer","error","setError","mathField","useRef","rootPadding","InputBase","inputComponent","inputProps","val","ans","CalculatorBackend","self","solveEquation","console","log","steps","pop","newEquation","ascii","evaluate","toExponential","er","current","value","fullWidth","xs","write","focus","cmd","Typography","color","Paper","paper","root","marginLeft","marginRight","marginTop","paddingLeft","paddingRight","minHeight","maxWidth"],"mappings":"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","file":"static/js/12.8266bce5.chunk.js","sourcesContent":["/**\r\n * Thank you ChristopherChudzicki for this code! (copy-paste)\r\n *\r\n * Makes a series of replacements on MathQuill-generated LaTeX strings so that\r\n * they can be parsed by MathJS.\r\n *\r\n * Notes:\r\n *  1. This is pretty heuristic. Might discover updates needed.\r\n *  2. Much of this could be used to preprocess LaTeX generated by other means\r\n * (i.e., not MathQuill.) The main bit that is MathQuill-specific is probably\r\n * the operatorname replacements.\r\n *\r\n * @param  {string} fromMQ a MathQuill-generated LaTeX expression\r\n * @return {string} the input expression with LaTeX commands converted to mathjs\r\n */\r\nexport default function mathquillToMathJS(fromMQ) {\r\n  const replacements = [\r\n    { tex: \"\\\\operatorname{diff}\", mathjs: \"diff\" },\r\n    { tex: \"\\\\operatorname{pdiff}\", mathjs: \"pdiff\" },\r\n    { tex: \"\\\\operatorname{curl}\", mathjs: \"curl\" },\r\n    { tex: \"\\\\operatorname{div}\", mathjs: \"div\" },\r\n    { tex: \"\\\\operatorname{norm}\", mathjs: \"norm\" },\r\n    { tex: \"\\\\operatorname{mod}\", mathjs: \"mod\" },\r\n    { tex: \"\\\\operatorname{abs}\", mathjs: \"abs\" },\r\n    { tex: \"\\\\operatorname{unitT}\", mathjs: \"unitT\" },\r\n    { tex: \"\\\\operatorname{unitN}\", mathjs: \"unitN\" },\r\n    { tex: \"\\\\operatorname{unitB}\", mathjs: \"unitB\" },\r\n    { tex: \"\\\\operatorname{arccosh}\", mathjs: \"arccosh\" },\r\n    { tex: \"\\\\operatorname{arcsinh}\", mathjs: \"arcsinh\" },\r\n    { tex: \"\\\\operatorname{arctanh}\", mathjs: \"arctanh\" },\r\n    { tex: \"\\\\cdot\", mathjs: \" * \" },\r\n    { tex: \"\\\\left\", mathjs: \"\" },\r\n    { tex: \"\\\\right\", mathjs: \"\" },\r\n    { tex: \"{\", mathjs: \"(\" },\r\n    { tex: \"}\", mathjs: \")\" },\r\n    { tex: \"~\", mathjs: \" \" },\r\n    { tex: \"\\\\\", mathjs: \" \" },\r\n  ];\r\n\r\n  // remove fractions, then apply replacements\r\n  const noFrac = fracToDivision(fromMQ);\r\n  const noBraceSub = convertSubscript(noFrac);\r\n  return replacements.reduce(\r\n    (acc, r) => replaceAll(acc, r[\"tex\"], r[\"mathjs\"]),\r\n    noBraceSub\r\n  );\r\n}\r\n\r\n/**\r\n * Recursively removes braces from LaTeX subscripts\r\n *   - example: x_{12foo_{bar123_{evenlower}}} --> x_12foo_bar123_evenlower\r\n */\r\nexport function convertSubscript(expr) {\r\n  const sub = \"_{\";\r\n  const subStart = expr.indexOf(sub);\r\n\r\n  if (subStart < 0) {\r\n    return expr;\r\n  }\r\n\r\n  const numStart = subStart + sub.length;\r\n  const closingBrace = expr.indexOf(\"}\", numStart);\r\n  const newExpr =\r\n    expr.slice(0, subStart) +\r\n    \"_\" +\r\n    expr.slice(numStart, closingBrace) +\r\n    expr.slice(closingBrace + 1);\r\n\r\n  return convertSubscript(newExpr);\r\n}\r\n\r\n/**\r\n * Recursively replaces LaTeX fractions with normal divison\r\n *   - example: \\frac{a}{1 + \\frac{b}{c}} --> {a}/{1 + {b}/{c}}\r\n */\r\nexport function fracToDivision(expr) {\r\n  const frac = \"\\\\frac\";\r\n  const fracStart = expr.indexOf(frac);\r\n  const numStart = fracStart + frac.length;\r\n\r\n  if (fracStart < 0) {\r\n    return expr;\r\n  }\r\n\r\n  const divIdx = findClosingBrace(expr, numStart);\r\n  // Remove frac, and add \"/\"\r\n  const newExpr =\r\n    expr.slice(0, fracStart) +\r\n    expr.slice(numStart, divIdx + 1) +\r\n    \"/\" +\r\n    expr.slice(divIdx + 1);\r\n\r\n  return fracToDivision(newExpr);\r\n}\r\n\r\nexport function capitalize(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n}\r\n\r\nexport function escapeRegExp(str) {\r\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\r\n  // $& means the whole matched string\r\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\n\r\nexport function replaceAll(str, find, replaceWith) {\r\n  // from https://stackoverflow.com/a/1144788/2747370\r\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replaceWith);\r\n}\r\n\r\nexport function findClosingBrace(str, startIdx) {\r\n  const braces = {\r\n    \"[\": \"]\",\r\n    \"<\": \">\",\r\n    \"(\": \")\",\r\n    \"{\": \"}\",\r\n  };\r\n\r\n  const openingBrace = str[startIdx];\r\n\r\n  const closingBrace = braces[openingBrace];\r\n\r\n  if (closingBrace === undefined) {\r\n    throw Error(\r\n      `${str} does not contain an opening brace at position ${startIdx}.`\r\n    );\r\n  }\r\n\r\n  let stack = 1;\r\n\r\n  // eslint-disable-next-line no-plusplus\r\n  for (let j = startIdx + 1; j < str.length; j++) {\r\n    if (str[j] === openingBrace) {\r\n      stack += +1;\r\n    } else if (str[j] === closingBrace) {\r\n      stack += -1;\r\n    }\r\n    if (stack === 0) {\r\n      return j;\r\n    }\r\n  }\r\n\r\n  // stack !== 0\r\n  throw Error(\r\n    `${str} has a brace that opens at position ${startIdx} but does not close.`\r\n  );\r\n}\r\n","// React\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nconst useStyles = makeStyles({\r\n  numPadRoot: {},\r\n  symbolPadRoot: {},\r\n  button: {\r\n    //flex: 1,\r\n  },\r\n});\r\n\r\nconst SymbolButton = ({ onClick, latex, symbol }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Button\r\n      className={classes.button}\r\n      variant=\"contained\"\r\n      onClick={() => onClick(latex)}\r\n    >\r\n      {symbol}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const NumPad = (props) => {\r\n  const classes = useStyles();\r\n  const { onClick } = props;\r\n\r\n  const NumRow = ({ arr }) => {\r\n    return (\r\n      <Grid container item spacing={1} wrap=\"nowrap\">\r\n        {React.Children.toArray(\r\n          arr.map((num) => (\r\n            <Grid item>\r\n              {num !== null ? (\r\n                <SymbolButton onClick={onClick} latex={num} symbol={num} />\r\n              ) : (\r\n                <Button className={classes.button} disabled />\r\n              )}\r\n            </Grid>\r\n          ))\r\n        )}\r\n      </Grid>\r\n    );\r\n  };\r\n  return (\r\n    <Grid container spacing={1} wrap=\"nowrap\" direction=\"column\">\r\n      <NumRow arr={[1, 2, 3]} />\r\n      <NumRow arr={[4, 5, 6]} />\r\n      <NumRow arr={[7, 8, 9]} />\r\n      <NumRow arr={[null, 0, \".\"]} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const SymbolPad = (props) => {\r\n  const { onClick } = props;\r\n  const symbols = [\r\n    { symbol: \"+\", latex: \"+\" },\r\n    { symbol: \"-\", latex: \"-\" },\r\n    { symbol: \"*\", latex: \"cdot\" },\r\n    { symbol: \"/\", latex: \"frac\" },\r\n    { symbol: \"√\", latex: \"sqrt\" },\r\n    { symbol: \"^\", latex: \"^\" },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={1}>\r\n        <Grid container item spacing={1}>\r\n          {React.Children.toArray(\r\n            symbols.map((obj) => {\r\n              return (\r\n                <Grid item>\r\n                  <SymbolButton\r\n                    onClick={onClick}\r\n                    latex={obj.latex}\r\n                    symbol={obj.symbol}\r\n                  />\r\n                </Grid>\r\n              );\r\n            })\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nNumPad.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nSymbolPad.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","// React\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// MUI\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\n// Math related\r\nimport mathquillToMathJS from \"../../../util/latex/preprocessMathQuill\";\r\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\r\nimport * as math from \"mathjs\";\r\nimport { NumPad, SymbolPad } from \"./CalcTools\";\r\nimport CalculatorBackend from \"../../../util/calculator\";\r\n\r\n// required for latex to format correctly\r\naddStyles();\r\nconst history = [];\r\nconst maths = math.create(math.all, {\r\n  number: \"BigNumber\",\r\n  precision: 64,\r\n});\r\nconst parser = maths.parser();\r\nconst styles = (theme) => ({\r\n  ...theme.spreadIt,\r\n  symbolPadGrid: {\r\n    paddingTop: 15,\r\n  },\r\n});\r\n\r\nconst LatexInput = (props) => {\r\n  const { onChange, onSubmit, mathquillDidMount } = props;\r\n\r\n  return (\r\n    <EditableMathField\r\n      latex=\"\"\r\n      style={{ height: \"auto\", fontSize: 50, flex: 1 }}\r\n      config={{\r\n        autoCommands: \"pi theta sqrt sum\",\r\n        autoOperatorNames:\r\n          \"sin cos tan feet ft inches in miles cm sech arcsec arsinh to rad deg radians degrees\",\r\n        handlers: {\r\n          enter: onSubmit,\r\n        },\r\n      }}\r\n      onChange={onChange}\r\n      mathquillDidMount={mathquillDidMount}\r\n    />\r\n  );\r\n};\r\n\r\nexport const Calculator = (props) => {\r\n  const { classes } = props;\r\n\r\n  const [expression, setExpression] = useState(\"\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n\r\n  const mathField = useRef(null);\r\n  const handleInputChange = (val) => {\r\n    setExpression(val.latex());\r\n  };\r\n\r\n  const handleSubmit = (val) => {\r\n    try {\r\n      const ans = CalculatorBackend.self.solveEquation(\r\n        mathquillToMathJS(val.latex())\r\n      );\r\n      console.log(ans);\r\n      if (!ans.steps.length) {\r\n        let ans = parser.evaluate(mathquillToMathJS(val.latex()));\r\n        setAnswer(`${ans.toExponential(10)} `);\r\n      } else setAnswer(ans.steps.pop().newEquation.ascii());\r\n      setError(false);\r\n    } catch (er) {\r\n      console.log(er);\r\n      setAnswer(\"ERROR!!!!\");\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const handleMathquillMount = (val) => {\r\n    mathField.current = val;\r\n  };\r\n\r\n  const handleNumberPressed = (num) => {\r\n    mathField.current.write(num);\r\n    mathField.current.focus();\r\n  };\r\n\r\n  const handleSymbolPressed = (symbol) => {\r\n    mathField.current.cmd(symbol);\r\n    mathField.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.rootPadding}>\r\n      <InputBase\r\n        inputComponent={LatexInput}\r\n        inputProps={{\r\n          onChange: handleInputChange,\r\n          onSubmit: handleSubmit,\r\n          mathquillDidMount: handleMathquillMount,\r\n        }}\r\n        /*className={classes.input}*/\r\n        value={expression}\r\n        fullWidth\r\n      ></InputBase>\r\n      <Grid container spacing={2} /*className={classes.symbolPadGrid}*/>\r\n        <Grid item xs>\r\n          <NumPad onClick={handleNumberPressed} />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <SymbolPad onClick={handleSymbolPressed} />\r\n        </Grid>\r\n      </Grid>\r\n      <Typography color={error ? \"error\" : \"initial\"}>{answer}</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Calculator);\r\n","// React\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// MUI\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\n// Components\r\nimport Calculator from \"./Calculator\";\r\n\r\n// Math related\r\nimport mathquillToMathJS from \"../../../util/latex/preprocessMathQuill\";\r\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\r\nimport * as math from \"mathjs\";\r\nimport { NumPad, SymbolPad } from \"./CalcTools\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.spreadIt,\r\n});\r\n\r\nexport const CalculatorModule = (props) => {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={5}>\r\n        <Paper className={classes.paper}>\r\n          <Calculator />\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(CalculatorModule);\r\n","// React\r\n\r\nimport { Paper } from \"@material-ui/core\";\r\nimport CalculatorModule from \"../components/Modules/Calculator/CalculatorModule\";\r\n\r\n// MUI Stuff\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.spreadIt,\r\n  root: {\r\n    ...theme.spreadIt.paper,\r\n    marginLeft: 300, // temporary until john fixes his stuff\r\n    marginRight: 30,\r\n    marginTop: 50,\r\n    paddingLeft: 50,\r\n    paddingRight: 50,\r\n    paddingTop: 30,\r\n    minHeight: \"80%\",\r\n    maxWidth: \"80%\",\r\n  },\r\n});\r\n\r\nconst Modules = (props) => {\r\n  const { classes } = props;\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <CalculatorModule />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Modules);\r\n"],"sourceRoot":""}